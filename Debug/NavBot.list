
NavBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006410  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800667c  0800667c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006684  08006684  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800668c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f28  20000074  08006700  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f9c  08006700  00022f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001411b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d7d  00000000  00000000  000341bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001140  00000000  00000000  00036f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00038080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022bf7  00000000  00000000  00039068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd21  00000000  00000000  0005bc5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d71e4  00000000  00000000  00069980  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140b64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b7c  00000000  00000000  00140be0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065c8 	.word	0x080065c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080065c8 	.word	0x080065c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <hcsr04_callback_redge>:
static volatile uint32_t callback_counter_1 = 0;
static volatile uint32_t trigger_sent_1 = 0;
volatile uint32_t fall_edge_time_1 = 0;
volatile uint32_t distance_1 = 0;
void hcsr04_callback_redge(uint8_t index)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	hcsr04_states[index] = ECHO_RECIEVED;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <hcsr04_callback_redge+0x4c>)
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	54d1      	strb	r1, [r2, r3]
	__HAL_TIM_SET_COUNTER(hscr04_handles[index]->delay_timer, 0);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <hcsr04_callback_redge+0x50>)
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24

	if(index == 0) callback_counter_0++;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d105      	bne.n	8000dfc <hcsr04_callback_redge+0x34>
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <hcsr04_callback_redge+0x54>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <hcsr04_callback_redge+0x54>)
 8000df8:	6013      	str	r3, [r2, #0]
	else callback_counter_1++;
}
 8000dfa:	e004      	b.n	8000e06 <hcsr04_callback_redge+0x3e>
	else callback_counter_1++;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <hcsr04_callback_redge+0x58>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <hcsr04_callback_redge+0x58>)
 8000e04:	6013      	str	r3, [r2, #0]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000098 	.word	0x20000098
 8000e18:	20000090 	.word	0x20000090
 8000e1c:	2000009c 	.word	0x2000009c
 8000e20:	200000ac 	.word	0x200000ac

08000e24 <hcsr04_callback_fedge>:

void hcsr04_callback_fedge(uint8_t index)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	if(index == 0) fall_edge_time_0 = __HAL_TIM_GET_COUNTER(hscr04_handles[index]->delay_timer);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d109      	bne.n	8000e48 <hcsr04_callback_fedge+0x24>
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <hcsr04_callback_fedge+0x44>)
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <hcsr04_callback_fedge+0x48>)
 8000e44:	6013      	str	r3, [r2, #0]
	else fall_edge_time_1 = __HAL_TIM_GET_COUNTER(hscr04_handles[index]->delay_timer);
}
 8000e46:	e008      	b.n	8000e5a <hcsr04_callback_fedge+0x36>
	else fall_edge_time_1 = __HAL_TIM_GET_COUNTER(hscr04_handles[index]->delay_timer);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <hcsr04_callback_fedge+0x44>)
 8000e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <hcsr04_callback_fedge+0x4c>)
 8000e58:	6013      	str	r3, [r2, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000090 	.word	0x20000090
 8000e6c:	200000a4 	.word	0x200000a4
 8000e70:	200000b4 	.word	0x200000b4

08000e74 <hcsr04_delay_0>:

static void hcsr04_delay_0(uint32_t value)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(hscr04_handles[0]->delay_timer, 0);
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <hcsr04_delay_0+0x34>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(hscr04_handles[0]->delay_timer) < value);
 8000e88:	bf00      	nop
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <hcsr04_delay_0+0x34>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d8f7      	bhi.n	8000e8a <hcsr04_delay_0+0x16>
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000090 	.word	0x20000090

08000eac <hcsr04_delay_1>:

static void hcsr04_delay_1(uint32_t value)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(hscr04_handles[1]->delay_timer, 0);
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <hcsr04_delay_1+0x34>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(hscr04_handles[1]->delay_timer) < value);
 8000ec0:	bf00      	nop
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <hcsr04_delay_1+0x34>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d8f7      	bhi.n	8000ec2 <hcsr04_delay_1+0x16>
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000090 	.word	0x20000090
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <HCSR04_TASK_02>:
void HCSR04_TASK_02(void *xParams)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b08b      	sub	sp, #44	; 0x2c
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	HCSR04_Type *hcsr_handle = hscr04_handles[1];
 8000ef0:	4b45      	ldr	r3, [pc, #276]	; (8001008 <HCSR04_TASK_02+0x120>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
	char msg_buffer[20] = {0};
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
	TickType_t currentTime = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
	//HAL_TIM_Base_Start_IT(hcsr_handle->timer);
	NVIC_EnableIRQ(EXTI3_IRQn);
 8000f0a:	2009      	movs	r0, #9
 8000f0c:	f7ff ff3e 	bl	8000d8c <__NVIC_EnableIRQ>
	HAL_Delay(1000);
 8000f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f14:	f000 fe16 	bl	8001b44 <HAL_Delay>
	for(;;)
	{

		switch(hcsr04_states[1])
 8000f18:	4b3c      	ldr	r3, [pc, #240]	; (800100c <HCSR04_TASK_02+0x124>)
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d05f      	beq.n	8000fe2 <HCSR04_TASK_02+0xfa>
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d020      	beq.n	8000f68 <HCSR04_TASK_02+0x80>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d000      	beq.n	8000f2c <HCSR04_TASK_02+0x44>
			/*wait for state transition from echo interrupt*/
			if(__HAL_TIM_GET_COUNTER(hscr04_handles[1]->delay_timer) > 10000) hcsr04_states[1] = SEND_TRIG;
			break;

		default:
			break;
 8000f2a:	e067      	b.n	8000ffc <HCSR04_TASK_02+0x114>
			HAL_GPIO_WritePin(hcsr_handle->trig_port, hcsr_handle->trig_pin, GPIO_PIN_SET);
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	68d8      	ldr	r0, [r3, #12]
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	7a1b      	ldrb	r3, [r3, #8]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	2201      	movs	r2, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f001 f899 	bl	8002070 <HAL_GPIO_WritePin>
			hcsr04_delay_1(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f7ff ffb4 	bl	8000eac <hcsr04_delay_1>
			HAL_GPIO_WritePin(hcsr_handle->trig_port, hcsr_handle->trig_pin, GPIO_PIN_RESET);
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	68d8      	ldr	r0, [r3, #12]
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	7a1b      	ldrb	r3, [r3, #8]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	f001 f88d 	bl	8002070 <HAL_GPIO_WritePin>
			hcsr04_states[1] = WAIT_ECHO;
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HCSR04_TASK_02+0x124>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	705a      	strb	r2, [r3, #1]
			trigger_sent_1++;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <HCSR04_TASK_02+0x128>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <HCSR04_TASK_02+0x128>)
 8000f64:	6013      	str	r3, [r2, #0]
			break;
 8000f66:	e049      	b.n	8000ffc <HCSR04_TASK_02+0x114>
			distance_1 = ((fall_edge_time_1) * 0.034) / 2;
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HCSR04_TASK_02+0x12c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fae1 	bl	8000534 <__aeabi_ui2d>
 8000f72:	a323      	add	r3, pc, #140	; (adr r3, 8001000 <HCSR04_TASK_02+0x118>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fb56 	bl	8000628 <__aeabi_dmul>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	4618      	mov	r0, r3
 8000f82:	4621      	mov	r1, r4
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8c:	f7ff fc76 	bl	800087c <__aeabi_ddiv>
 8000f90:	4603      	mov	r3, r0
 8000f92:	460c      	mov	r4, r1
 8000f94:	4618      	mov	r0, r3
 8000f96:	4621      	mov	r1, r4
 8000f98:	f7ff fd58 	bl	8000a4c <__aeabi_d2uiz>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HCSR04_TASK_02+0x130>)
 8000fa0:	601a      	str	r2, [r3, #0]
			snprintf(msg_buffer, 20, "Trig_1: %u\r\n", trigger_sent_1);
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HCSR04_TASK_02+0x128>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f107 0010 	add.w	r0, r7, #16
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HCSR04_TASK_02+0x134>)
 8000fac:	2114      	movs	r1, #20
 8000fae:	f004 fefb 	bl	8005da8 <sniprintf>
			HAL_UART_Transmit(get_uart_handle(), msg_buffer, 20, 100);
 8000fb2:	f000 faf5 	bl	80015a0 <get_uart_handle>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f107 0110 	add.w	r1, r7, #16
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	2214      	movs	r2, #20
 8000fc2:	f002 f85a 	bl	800307a <HAL_UART_Transmit>
			hcsr04_states[1] = SEND_TRIG;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HCSR04_TASK_02+0x124>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	705a      	strb	r2, [r3, #1]
			currentTime = xTaskGetTickCount();
 8000fcc:	f003 fce2 	bl	8004994 <xTaskGetTickCount>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&currentTime, pdMS_TO_TICKS(100));
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2164      	movs	r1, #100	; 0x64
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 fb66 	bl	80046ac <vTaskDelayUntil>
			break;
 8000fe0:	e00c      	b.n	8000ffc <HCSR04_TASK_02+0x114>
			if(__HAL_TIM_GET_COUNTER(hscr04_handles[1]->delay_timer) > 10000) hcsr04_states[1] = SEND_TRIG;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HCSR04_TASK_02+0x120>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d902      	bls.n	8000ffa <HCSR04_TASK_02+0x112>
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HCSR04_TASK_02+0x124>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	705a      	strb	r2, [r3, #1]
			break;
 8000ffa:	bf00      	nop
		switch(hcsr04_states[1])
 8000ffc:	e78c      	b.n	8000f18 <HCSR04_TASK_02+0x30>
 8000ffe:	bf00      	nop
 8001000:	b020c49c 	.word	0xb020c49c
 8001004:	3fa16872 	.word	0x3fa16872
 8001008:	20000090 	.word	0x20000090
 800100c:	20000098 	.word	0x20000098
 8001010:	200000b0 	.word	0x200000b0
 8001014:	200000b4 	.word	0x200000b4
 8001018:	200000b8 	.word	0x200000b8
 800101c:	080065e0 	.word	0x080065e0

08001020 <HCSR04_TASK_01>:
		}
	}
}

void HCSR04_TASK_01(void *xParams)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b08b      	sub	sp, #44	; 0x2c
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	HCSR04_Type *hcsr_handle = hscr04_handles[0];
 8001028:	4b45      	ldr	r3, [pc, #276]	; (8001140 <HCSR04_TASK_01+0x120>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
	char msg_buffer[20] = { 0 };
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
	TickType_t currentTime = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
	//HAL_TIM_Base_Start_IT(hcsr_handle->timer);
	NVIC_EnableIRQ(EXTI4_IRQn);
 8001042:	200a      	movs	r0, #10
 8001044:	f7ff fea2 	bl	8000d8c <__NVIC_EnableIRQ>
	HAL_Delay(1000);
 8001048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104c:	f000 fd7a 	bl	8001b44 <HAL_Delay>
	for(;;)
	{

		switch(hcsr04_states[0])
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <HCSR04_TASK_01+0x124>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d05f      	beq.n	800111a <HCSR04_TASK_01+0xfa>
 800105a:	2b02      	cmp	r3, #2
 800105c:	d020      	beq.n	80010a0 <HCSR04_TASK_01+0x80>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d000      	beq.n	8001064 <HCSR04_TASK_01+0x44>
			/*wait for state transition from echo interrupt*/
			if(__HAL_TIM_GET_COUNTER(hscr04_handles[0]->delay_timer) > 10000) hcsr04_states[0] = SEND_TRIG;
			break;

		default:
			break;
 8001062:	e067      	b.n	8001134 <HCSR04_TASK_01+0x114>
			HAL_GPIO_WritePin(hcsr_handle->trig_port, hcsr_handle->trig_pin, GPIO_PIN_SET);
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	68d8      	ldr	r0, [r3, #12]
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	7a1b      	ldrb	r3, [r3, #8]
 800106c:	b29b      	uxth	r3, r3
 800106e:	2201      	movs	r2, #1
 8001070:	4619      	mov	r1, r3
 8001072:	f000 fffd 	bl	8002070 <HAL_GPIO_WritePin>
			hcsr04_delay_0(10);
 8001076:	200a      	movs	r0, #10
 8001078:	f7ff fefc 	bl	8000e74 <hcsr04_delay_0>
			HAL_GPIO_WritePin(hcsr_handle->trig_port, hcsr_handle->trig_pin, GPIO_PIN_RESET);
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	68d8      	ldr	r0, [r3, #12]
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	7a1b      	ldrb	r3, [r3, #8]
 8001084:	b29b      	uxth	r3, r3
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	f000 fff1 	bl	8002070 <HAL_GPIO_WritePin>
			hcsr04_states[0] = WAIT_ECHO;
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HCSR04_TASK_01+0x124>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
			trigger_sent_0++;
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <HCSR04_TASK_01+0x128>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <HCSR04_TASK_01+0x128>)
 800109c:	6013      	str	r3, [r2, #0]
			break;
 800109e:	e049      	b.n	8001134 <HCSR04_TASK_01+0x114>
			distance_0 = ((fall_edge_time_0) * 0.034) / 2;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <HCSR04_TASK_01+0x12c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa45 	bl	8000534 <__aeabi_ui2d>
 80010aa:	a323      	add	r3, pc, #140	; (adr r3, 8001138 <HCSR04_TASK_01+0x118>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff faba 	bl	8000628 <__aeabi_dmul>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4618      	mov	r0, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c4:	f7ff fbda 	bl	800087c <__aeabi_ddiv>
 80010c8:	4603      	mov	r3, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	4618      	mov	r0, r3
 80010ce:	4621      	mov	r1, r4
 80010d0:	f7ff fcbc 	bl	8000a4c <__aeabi_d2uiz>
 80010d4:	4602      	mov	r2, r0
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HCSR04_TASK_01+0x130>)
 80010d8:	601a      	str	r2, [r3, #0]
			hcsr04_states[0] = SEND_TRIG;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HCSR04_TASK_01+0x124>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
			snprintf(msg_buffer, 20, "Trig_0: %u\r\n", trigger_sent_0);
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HCSR04_TASK_01+0x128>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f107 0010 	add.w	r0, r7, #16
 80010e8:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <HCSR04_TASK_01+0x134>)
 80010ea:	2114      	movs	r1, #20
 80010ec:	f004 fe5c 	bl	8005da8 <sniprintf>
			HAL_UART_Transmit(get_uart_handle(), msg_buffer, 20, 100);
 80010f0:	f000 fa56 	bl	80015a0 <get_uart_handle>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f107 0110 	add.w	r1, r7, #16
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	2214      	movs	r2, #20
 8001100:	f001 ffbb 	bl	800307a <HAL_UART_Transmit>
			currentTime = xTaskGetTickCount();
 8001104:	f003 fc46 	bl	8004994 <xTaskGetTickCount>
 8001108:	4603      	mov	r3, r0
 800110a:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&currentTime, pdMS_TO_TICKS(100));
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2164      	movs	r1, #100	; 0x64
 8001112:	4618      	mov	r0, r3
 8001114:	f003 faca 	bl	80046ac <vTaskDelayUntil>
			break;
 8001118:	e00c      	b.n	8001134 <HCSR04_TASK_01+0x114>
			if(__HAL_TIM_GET_COUNTER(hscr04_handles[0]->delay_timer) > 10000) hcsr04_states[0] = SEND_TRIG;
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HCSR04_TASK_01+0x120>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	f242 7210 	movw	r2, #10000	; 0x2710
 8001128:	4293      	cmp	r3, r2
 800112a:	d902      	bls.n	8001132 <HCSR04_TASK_01+0x112>
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HCSR04_TASK_01+0x124>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
			break;
 8001132:	bf00      	nop
		switch(hcsr04_states[0])
 8001134:	e78c      	b.n	8001050 <HCSR04_TASK_01+0x30>
 8001136:	bf00      	nop
 8001138:	b020c49c 	.word	0xb020c49c
 800113c:	3fa16872 	.word	0x3fa16872
 8001140:	20000090 	.word	0x20000090
 8001144:	20000098 	.word	0x20000098
 8001148:	200000a0 	.word	0x200000a0
 800114c:	200000a4 	.word	0x200000a4
 8001150:	200000a8 	.word	0x200000a8
 8001154:	080065f0 	.word	0x080065f0

08001158 <hscr_task_init>:
		}
	}
}

static void hscr_task_init()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
	TaskHandle_t hcsr_task_handle_1, hcsr_task_handle_2;
	BaseType_t status;

	status = xTaskCreate(HCSR04_TASK_01, "HCSRTASK01", 400, NULL, 1, &hcsr_task_handle_1);
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2301      	movs	r3, #1
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800116e:	4917      	ldr	r1, [pc, #92]	; (80011cc <hscr_task_init+0x74>)
 8001170:	4817      	ldr	r0, [pc, #92]	; (80011d0 <hscr_task_init+0x78>)
 8001172:	f003 f957 	bl	8004424 <xTaskCreate>
 8001176:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d009      	beq.n	8001192 <hscr_task_init+0x3a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800117e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001182:	f383 8811 	msr	BASEPRI, r3
 8001186:	f3bf 8f6f 	isb	sy
 800118a:	f3bf 8f4f 	dsb	sy
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	e7fe      	b.n	8001190 <hscr_task_init+0x38>

	status = xTaskCreate(HCSR04_TASK_02, "HCSRTASK02", 400, NULL, 1, &hcsr_task_handle_2);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2301      	movs	r3, #1
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <hscr_task_init+0x7c>)
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <hscr_task_init+0x80>)
 80011a4:	f003 f93e 	bl	8004424 <xTaskCreate>
 80011a8:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d009      	beq.n	80011c4 <hscr_task_init+0x6c>
 80011b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b4:	f383 8811 	msr	BASEPRI, r3
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e7fe      	b.n	80011c2 <hscr_task_init+0x6a>
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	08006600 	.word	0x08006600
 80011d0:	08001021 	.word	0x08001021
 80011d4:	0800660c 	.word	0x0800660c
 80011d8:	08000ee9 	.word	0x08000ee9

080011dc <hscr04_init>:

void hscr04_init(HCSR04_Type *lHCSR04_handle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	static uint8_t hcsr_num = 0;
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
	if (hcsr_num > HCSR04_NUM)
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <hscr04_init+0x84>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d82d      	bhi.n	8001258 <hscr04_init+0x7c>
	{
		return;
	}
	/*Configure GPIO pin : ECHO Pin */
	GPIO_InitStruct.Pin = lHCSR04_handle->echo_pin;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <hscr04_init+0x88>)
 8001204:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001206:	2302      	movs	r3, #2
 8001208:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lHCSR04_handle->echo_port, &GPIO_InitStruct);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fd99 	bl	8001d4c <HAL_GPIO_Init>

	/*Configure GPIO pin : TRIG */
	GPIO_InitStruct.Pin = lHCSR04_handle->trig_pin;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7a1b      	ldrb	r3, [r3, #8]
 800121e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(lHCSR04_handle->trig_port, &GPIO_InitStruct);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fd88 	bl	8001d4c <HAL_GPIO_Init>

	hscr04_handles[hcsr_num++] = lHCSR04_handle;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <hscr04_init+0x84>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	b2d1      	uxtb	r1, r2
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <hscr04_init+0x84>)
 8001246:	7011      	strb	r1, [r2, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <hscr04_init+0x8c>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*Init RTOS tasks*/
	hscr_task_init();
 8001252:	f7ff ff81 	bl	8001158 <hscr_task_init>
 8001256:	e000      	b.n	800125a <hscr04_init+0x7e>
		return;
 8001258:	bf00      	nop
}
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200000bc 	.word	0x200000bc
 8001264:	10110000 	.word	0x10110000
 8001268:	20000090 	.word	0x20000090

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001270:	f000 fc26 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f844 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f000 f922 	bl	80014c0 <MX_GPIO_Init>
  MX_TIM13_Init();
 800127c:	f000 f8ae 	bl	80013dc <MX_TIM13_Init>
  MX_TIM14_Init();
 8001280:	f000 f8d0 	bl	8001424 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8001284:	f000 f8f2 	bl	800146c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_handle_0.echo_pin = 0x10;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <main+0x80>)
 800128a:	2210      	movs	r2, #16
 800128c:	701a      	strb	r2, [r3, #0]
  HCSR04_handle_0.echo_port = GPIOB;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <main+0x80>)
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <main+0x84>)
 8001292:	605a      	str	r2, [r3, #4]
  HCSR04_handle_0.trig_pin = 0x20;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <main+0x80>)
 8001296:	2220      	movs	r2, #32
 8001298:	721a      	strb	r2, [r3, #8]
  HCSR04_handle_0.trig_port = GPIOB;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <main+0x80>)
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <main+0x84>)
 800129e:	60da      	str	r2, [r3, #12]
  HCSR04_handle_0.delay_timer = &htim13;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <main+0x80>)
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <main+0x88>)
 80012a4:	615a      	str	r2, [r3, #20]
  hscr04_init(&HCSR04_handle_0);
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <main+0x80>)
 80012a8:	f7ff ff98 	bl	80011dc <hscr04_init>

  HCSR04_handle_1.echo_pin = 0x08;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <main+0x8c>)
 80012ae:	2208      	movs	r2, #8
 80012b0:	701a      	strb	r2, [r3, #0]
  HCSR04_handle_1.echo_port = GPIOB;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <main+0x8c>)
 80012b4:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <main+0x84>)
 80012b6:	605a      	str	r2, [r3, #4]
  HCSR04_handle_1.trig_pin = 0x02;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <main+0x8c>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	721a      	strb	r2, [r3, #8]
  HCSR04_handle_1.trig_port = GPIOB;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <main+0x8c>)
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <main+0x84>)
 80012c2:	60da      	str	r2, [r3, #12]
  HCSR04_handle_1.delay_timer = &htim14;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <main+0x8c>)
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <main+0x90>)
 80012c8:	615a      	str	r2, [r3, #20]
  hscr04_init(&HCSR04_handle_1);
 80012ca:	480b      	ldr	r0, [pc, #44]	; (80012f8 <main+0x8c>)
 80012cc:	f7ff ff86 	bl	80011dc <hscr04_init>

  HAL_TIM_Base_Start(&htim13);
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <main+0x88>)
 80012d2:	f001 fc58 	bl	8002b86 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim14);
 80012d6:	4809      	ldr	r0, [pc, #36]	; (80012fc <main+0x90>)
 80012d8:	f001 fc55 	bl	8002b86 <HAL_TIM_Base_Start>

  __HAL_TIM_SET_COUNTER(&htim13, 0);
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <main+0x88>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24

  vTaskStartScheduler();
 80012e4:	f003 fa60 	bl	80047a8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <main+0x7c>
 80012ea:	bf00      	nop
 80012ec:	200000c0 	.word	0x200000c0
 80012f0:	40020400 	.word	0x40020400
 80012f4:	20012e54 	.word	0x20012e54
 80012f8:	200000d8 	.word	0x200000d8
 80012fc:	20012ed4 	.word	0x20012ed4

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	; 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2234      	movs	r2, #52	; 0x34
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f004 fd41 	bl	8005d96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <SystemClock_Config+0xd4>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <SystemClock_Config+0xd4>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <SystemClock_Config+0xd4>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <SystemClock_Config+0xd8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <SystemClock_Config+0xd8>)
 800134e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <SystemClock_Config+0xd8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001368:	2310      	movs	r3, #16
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001370:	2300      	movs	r3, #0
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001374:	2310      	movs	r3, #16
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001378:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800137e:	2304      	movs	r3, #4
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001382:	2302      	movs	r3, #2
 8001384:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4618      	mov	r0, r3
 8001390:	f001 f974 	bl	800267c <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800139a:	f000 f9a7 	bl	80016ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a2:	2302      	movs	r3, #2
 80013a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	2102      	movs	r1, #2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fe72 	bl	80020a4 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013c6:	f000 f991 	bl	80016ec <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	; 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000

080013dc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_TIM13_Init+0x40>)
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_TIM13_Init+0x44>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <MX_TIM13_Init+0x40>)
 80013e8:	2253      	movs	r2, #83	; 0x53
 80013ea:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_TIM13_Init+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_TIM13_Init+0x40>)
 80013f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_TIM13_Init+0x40>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_TIM13_Init+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_TIM13_Init+0x40>)
 8001408:	f001 fb92 	bl	8002b30 <HAL_TIM_Base_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001412:	f000 f96b 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20012e54 	.word	0x20012e54
 8001420:	40001c00 	.word	0x40001c00

08001424 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_TIM14_Init+0x40>)
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <MX_TIM14_Init+0x44>)
 800142c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <MX_TIM14_Init+0x40>)
 8001430:	2253      	movs	r2, #83	; 0x53
 8001432:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_TIM14_Init+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_TIM14_Init+0x40>)
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_TIM14_Init+0x40>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_TIM14_Init+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_TIM14_Init+0x40>)
 8001450:	f001 fb6e 	bl	8002b30 <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800145a:	f000 f947 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20012ed4 	.word	0x20012ed4
 8001468:	40002000 	.word	0x40002000

0800146c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <MX_USART2_UART_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 80014a4:	f001 fd9c 	bl	8002fe0 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ae:	f000 f91d 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20012e94 	.word	0x20012e94
 80014bc:	40004400 	.word	0x40004400

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a2c      	ldr	r2, [pc, #176]	; (8001590 <MX_GPIO_Init+0xd0>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <MX_GPIO_Init+0xd0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <MX_GPIO_Init+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a25      	ldr	r2, [pc, #148]	; (8001590 <MX_GPIO_Init+0xd0>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <MX_GPIO_Init+0xd0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_GPIO_Init+0xd0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <MX_GPIO_Init+0xd0>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_GPIO_Init+0xd0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_GPIO_Init+0xd0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a17      	ldr	r2, [pc, #92]	; (8001590 <MX_GPIO_Init+0xd0>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_GPIO_Init+0xd0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2120      	movs	r1, #32
 800154a:	4812      	ldr	r0, [pc, #72]	; (8001594 <MX_GPIO_Init+0xd4>)
 800154c:	f000 fd90 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_GPIO_Init+0xd8>)
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_GPIO_Init+0xdc>)
 8001566:	f000 fbf1 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800156a:	2320      	movs	r3, #32
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_GPIO_Init+0xd4>)
 8001582:	f000 fbe3 	bl	8001d4c <HAL_GPIO_Init>

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40020000 	.word	0x40020000
 8001598:	10210000 	.word	0x10210000
 800159c:	40020800 	.word	0x40020800

080015a0 <get_uart_handle>:

/* USER CODE BEGIN 4 */

UART_HandleTypeDef *get_uart_handle()
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	return &huart2;
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <get_uart_handle+0x10>)
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20012e94 	.word	0x20012e94

080015b4 <EXTI9_5_IRQHandler>:
volatile static uint32_t interrupt_counter = 0;
void EXTI9_5_IRQHandler()
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
	interrupt_counter++;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <EXTI9_5_IRQHandler+0x18>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a03      	ldr	r2, [pc, #12]	; (80015cc <EXTI9_5_IRQHandler+0x18>)
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	200000f0 	.word	0x200000f0

080015d0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	interrupt_counter++;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <EXTI3_IRQHandler+0x74>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <EXTI3_IRQHandler+0x74>)
 80015dc:	6013      	str	r3, [r2, #0]
	if(EXTI->PR & (1 << 3))
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <EXTI3_IRQHandler+0x78>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d02a      	beq.n	8001640 <EXTI3_IRQHandler+0x70>
	{
		EXTI->PR |= (1 << 3);
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <EXTI3_IRQHandler+0x78>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <EXTI3_IRQHandler+0x78>)
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	6153      	str	r3, [r2, #20]

		if(EXTI->RTSR & (1 << 3))
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <EXTI3_IRQHandler+0x78>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00f      	beq.n	8001622 <EXTI3_IRQHandler+0x52>
		{
			EXTI->RTSR &= ~(1 << 3);
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <EXTI3_IRQHandler+0x78>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <EXTI3_IRQHandler+0x78>)
 8001608:	f023 0308 	bic.w	r3, r3, #8
 800160c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << 3);
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <EXTI3_IRQHandler+0x78>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <EXTI3_IRQHandler+0x78>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	60d3      	str	r3, [r2, #12]
			hcsr04_callback_redge(1);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff fbd4 	bl	8000dc8 <hcsr04_callback_redge>
			EXTI->FTSR &= ~(1 << 3);
			EXTI->RTSR |= (1 << 3);
			hcsr04_callback_fedge(1);
		}
	}
}
 8001620:	e00e      	b.n	8001640 <EXTI3_IRQHandler+0x70>
			EXTI->FTSR &= ~(1 << 3);
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <EXTI3_IRQHandler+0x78>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <EXTI3_IRQHandler+0x78>)
 8001628:	f023 0308 	bic.w	r3, r3, #8
 800162c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << 3);
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <EXTI3_IRQHandler+0x78>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <EXTI3_IRQHandler+0x78>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6093      	str	r3, [r2, #8]
			hcsr04_callback_fedge(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fbf2 	bl	8000e24 <hcsr04_callback_fedge>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000f0 	.word	0x200000f0
 8001648:	40013c00 	.word	0x40013c00

0800164c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	interrupt_counter++;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <EXTI4_IRQHandler+0x74>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	4a1a      	ldr	r2, [pc, #104]	; (80016c0 <EXTI4_IRQHandler+0x74>)
 8001658:	6013      	str	r3, [r2, #0]
	if(EXTI->PR & (1 << 4))
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d02a      	beq.n	80016bc <EXTI4_IRQHandler+0x70>
	{
		EXTI->PR |= (1 << 4);
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 800166c:	f043 0310 	orr.w	r3, r3, #16
 8001670:	6153      	str	r3, [r2, #20]

		if(EXTI->RTSR & (1 << 4))
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00f      	beq.n	800169e <EXTI4_IRQHandler+0x52>
		{
			EXTI->RTSR &= ~(1 << 4);
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 8001684:	f023 0310 	bic.w	r3, r3, #16
 8001688:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << 4);
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 8001690:	f043 0310 	orr.w	r3, r3, #16
 8001694:	60d3      	str	r3, [r2, #12]
			hcsr04_callback_redge(0);
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fb96 	bl	8000dc8 <hcsr04_callback_redge>
			EXTI->FTSR &= ~(1 << 4);
			EXTI->RTSR |= (1 << 4);
			hcsr04_callback_fedge(0);
		}
	}
}
 800169c:	e00e      	b.n	80016bc <EXTI4_IRQHandler+0x70>
			EXTI->FTSR &= ~(1 << 4);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 80016a4:	f023 0310 	bic.w	r3, r3, #16
 80016a8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << 4);
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <EXTI4_IRQHandler+0x78>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6093      	str	r3, [r2, #8]
			hcsr04_callback_fedge(0);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fbb4 	bl	8000e24 <hcsr04_callback_fedge>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000f0 	.word	0x200000f0
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016da:	f000 fa13 	bl	8001b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40001000 	.word	0x40001000

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <Error_Handler+0x6>

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_MspInit+0x4c>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x4c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <HAL_TIM_Base_MspInit+0x64>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10e      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_TIM_Base_MspInit+0x68>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_TIM_Base_MspInit+0x68>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_TIM_Base_MspInit+0x68>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001772:	e012      	b.n	800179a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_TIM_Base_MspInit+0x6c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10d      	bne.n	800179a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_TIM_Base_MspInit+0x68>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_TIM_Base_MspInit+0x68>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_TIM_Base_MspInit+0x68>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40001c00 	.word	0x40001c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40002000 	.word	0x40002000

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_UART_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12b      	bne.n	800182e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_UART_MspInit+0x88>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_UART_MspInit+0x88>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_UART_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_UART_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_UART_MspInit+0x88>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_UART_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800180e:	230c      	movs	r3, #12
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181e:	2307      	movs	r3, #7
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_UART_MspInit+0x8c>)
 800182a:	f000 fa8f 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40004400 	.word	0x40004400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2036      	movs	r0, #54	; 0x36
 800185a:	f000 fa4d 	bl	8001cf8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800185e:	2036      	movs	r0, #54	; 0x36
 8001860:	f000 fa66 	bl	8001d30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_InitTick+0xa4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_InitTick+0xa4>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_InitTick+0xa4>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001880:	f107 0210 	add.w	r2, r7, #16
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fd24 	bl	80022d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001890:	f000 fcfa 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8001894:	4603      	mov	r3, r0
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	4a13      	ldr	r2, [pc, #76]	; (80018ec <HAL_InitTick+0xa8>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9b      	lsrs	r3, r3, #18
 80018a4:	3b01      	subs	r3, #1
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_InitTick+0xac>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_InitTick+0xb0>)
 80018ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_InitTick+0xac>)
 80018b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_InitTick+0xac>)
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_InitTick+0xac>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_InitTick+0xac>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018c8:	4809      	ldr	r0, [pc, #36]	; (80018f0 <HAL_InitTick+0xac>)
 80018ca:	f001 f931 	bl	8002b30 <HAL_TIM_Base_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018d4:	4806      	ldr	r0, [pc, #24]	; (80018f0 <HAL_InitTick+0xac>)
 80018d6:	f001 f97a 	bl	8002bce <HAL_TIM_Base_Start_IT>
 80018da:	4603      	mov	r3, r0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3730      	adds	r7, #48	; 0x30
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	431bde83 	.word	0x431bde83
 80018f0:	20012f14 	.word	0x20012f14
 80018f4:	40001000 	.word	0x40001000

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <NMI_Handler+0x4>

080018fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//NVIC_SystemReset();
	__asm volatile
 8001902:	f01e 0f04 	tst.w	lr, #4
 8001906:	bf0c      	ite	eq
 8001908:	f3ef 8008 	mrseq	r0, MSP
 800190c:	f3ef 8009 	mrsne	r0, PSP
 8001910:	6981      	ldr	r1, [r0, #24]
 8001912:	4a00      	ldr	r2, [pc, #0]	; (8001914 <HardFault_Handler+0x16>)
 8001914:	4710      	bx	r2

08001916 <handler2_address_const>:
 8001916:	1999      	.short	0x1999
 8001918:	0800      	.short	0x0800
  //while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM6_DAC_IRQHandler+0x10>)
 800194a:	f001 f964 	bl	8002c16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20012f14 	.word	0x20012f14

08001958 <vApplicationStackOverflowHook>:

/* USER CODE BEGIN 1 */
volatile static uint8_t stack_overflow = 0;
volatile static uint8_t malloc_failed = 0;
void vApplicationStackOverflowHook()
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	stack_overflow++;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <vApplicationStackOverflowHook+0x1c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3301      	adds	r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b03      	ldr	r3, [pc, #12]	; (8001974 <vApplicationStackOverflowHook+0x1c>)
 8001968:	701a      	strb	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	200000f4 	.word	0x200000f4

08001978 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook()
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	malloc_failed++;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <vApplicationMallocFailedHook+0x1c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	3301      	adds	r3, #1
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b03      	ldr	r3, [pc, #12]	; (8001994 <vApplicationMallocFailedHook+0x1c>)
 8001988:	701a      	strb	r2, [r3, #0]
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	200000f5 	.word	0x200000f5

08001998 <pop_registers_from_fault_stack>:

void pop_registers_from_fault_stack(unsigned int * hardfault_args)
{
 8001998:	b480      	push	{r7}
 800199a:	b08b      	sub	sp, #44	; 0x2c
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
unsigned int stacked_r3;
unsigned int stacked_r12;
unsigned int stacked_lr;
unsigned int stacked_pc;
unsigned int stacked_psr;
    stacked_r0 = ((unsigned long) hardfault_args[0]);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    stacked_r1 = ((unsigned long) hardfault_args[1]);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	623b      	str	r3, [r7, #32]
    stacked_r2 = ((unsigned long) hardfault_args[2]);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	61fb      	str	r3, [r7, #28]
    stacked_r3 = ((unsigned long) hardfault_args[3]);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	61bb      	str	r3, [r7, #24]
    stacked_r12 = ((unsigned long) hardfault_args[4]);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	617b      	str	r3, [r7, #20]
    stacked_lr = ((unsigned long) hardfault_args[5]);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	613b      	str	r3, [r7, #16]
    stacked_pc = ((unsigned long) hardfault_args[6]);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	60fb      	str	r3, [r7, #12]
    stacked_psr = ((unsigned long) hardfault_args[7]);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	60bb      	str	r3, [r7, #8]
    /* Inspect stacked_pc to locate the offending instruction. */
    for( ;; );
 80019d0:	e7fe      	b.n	80019d0 <pop_registers_from_fault_stack+0x38>
	...

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f004 f992 	bl	8005d2c <__errno>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20020000 	.word	0x20020000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	200000f8 	.word	0x200000f8
 8001a3c:	20012fa0 	.word	0x20012fa0

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <SystemInit+0x28>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <SystemInit+0x28>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SystemInit+0x28>)
 8001a56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a72:	e003      	b.n	8001a7c <LoopCopyDataInit>

08001a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a7a:	3104      	adds	r1, #4

08001a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a84:	d3f6      	bcc.n	8001a74 <CopyDataInit>
  ldr  r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a88:	e002      	b.n	8001a90 <LoopFillZerobss>

08001a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a8c:	f842 3b04 	str.w	r3, [r2], #4

08001a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a94:	d3f9      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a96:	f7ff ffd3 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f004 f94d 	bl	8005d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff fbe5 	bl	800126c <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001aa8:	0800668c 	.word	0x0800668c
  ldr  r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ab0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001ab4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001ab8:	20012f9c 	.word	0x20012f9c

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_Init+0x40>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_Init+0x40>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_Init+0x40>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 f8fa 	bl	8001ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fea8 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af4:	f7ff fdfe 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20012f54 	.word	0x20012f54

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20012f54 	.word	0x20012f54

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_Delay+0x40>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000008 	.word	0x20000008

08001b88 <__NVIC_SetPriorityGrouping>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4907      	ldr	r1, [pc, #28]	; (8001c24 <__NVIC_EnableIRQ+0x38>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff4c 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0a:	f7ff ff61 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	6978      	ldr	r0, [r7, #20]
 8001d16:	f7ff ffb1 	bl	8001c7c <NVIC_EncodePriority>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff80 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff54 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e165      	b.n	8002034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8154 	bne.w	800202e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d00b      	beq.n	8001da6 <HAL_GPIO_Init+0x5a>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0xfc>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b12      	cmp	r3, #18
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80ae 	beq.w	800202e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <HAL_GPIO_Init+0x2fc>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a5b      	ldr	r2, [pc, #364]	; (8002048 <HAL_GPIO_Init+0x2fc>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_GPIO_Init+0x2fc>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_GPIO_Init+0x300>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4e      	ldr	r2, [pc, #312]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d025      	beq.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4d      	ldr	r2, [pc, #308]	; (8002054 <HAL_GPIO_Init+0x308>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01f      	beq.n	8001f62 <HAL_GPIO_Init+0x216>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4c      	ldr	r2, [pc, #304]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d019      	beq.n	8001f5e <HAL_GPIO_Init+0x212>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_GPIO_Init+0x310>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0x20e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <HAL_GPIO_Init+0x314>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00d      	beq.n	8001f56 <HAL_GPIO_Init+0x20a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a49      	ldr	r2, [pc, #292]	; (8002064 <HAL_GPIO_Init+0x318>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x206>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x31c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_GPIO_Init+0x202>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e00c      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f4e:	2307      	movs	r3, #7
 8001f50:	e00a      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4934      	ldr	r1, [pc, #208]	; (800204c <HAL_GPIO_Init+0x300>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_GPIO_Init+0x320>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001faa:	4a30      	ldr	r2, [pc, #192]	; (800206c <HAL_GPIO_Init+0x320>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	; (800206c <HAL_GPIO_Init+0x320>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd4:	4a25      	ldr	r2, [pc, #148]	; (800206c <HAL_GPIO_Init+0x320>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_GPIO_Init+0x320>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_GPIO_Init+0x320>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_GPIO_Init+0x320>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002028:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_GPIO_Init+0x320>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f ae96 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	3724      	adds	r7, #36	; 0x24
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40023800 	.word	0x40023800
 800204c:	40013800 	.word	0x40013800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021000 	.word	0x40021000
 8002064:	40021400 	.word	0x40021400
 8002068:	40021800 	.word	0x40021800
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0cc      	b.n	8002252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b8:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_ClockConfig+0x1b8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d90c      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b65      	ldr	r3, [pc, #404]	; (800225c <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <HAL_RCC_ClockConfig+0x1b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0b8      	b.n	8002252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f8:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a58      	ldr	r2, [pc, #352]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002102:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a52      	ldr	r2, [pc, #328]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800211a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b50      	ldr	r3, [pc, #320]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	494d      	ldr	r1, [pc, #308]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d044      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d119      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e07f      	b.n	8002252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d003      	beq.n	8002162 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800215e:	2b03      	cmp	r3, #3
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002162:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06f      	b.n	8002252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e067      	b.n	8002252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f023 0203 	bic.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4934      	ldr	r1, [pc, #208]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002194:	f7ff fcca 	bl	8001b2c <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7ff fcc6 	bl	8001b2c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e04f      	b.n	8002252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 020c 	and.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_RCC_ClockConfig+0x1b8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d20c      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e032      	b.n	8002252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4916      	ldr	r1, [pc, #88]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	4313      	orrs	r3, r2
 8002208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	490e      	ldr	r1, [pc, #56]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800222a:	f000 f887 	bl	800233c <HAL_RCC_GetSysClockFreq>
 800222e:	4601      	mov	r1, r0
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	fa21 f303 	lsr.w	r3, r1, r3
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fafa 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00
 8002260:	40023800 	.word	0x40023800
 8002264:	08006630 	.word	0x08006630
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_RCC_GetHCLKFreq+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000

08002288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800228c:	f7ff fff0 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 8002290:	4601      	mov	r1, r0
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0a9b      	lsrs	r3, r3, #10
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4a03      	ldr	r2, [pc, #12]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	08006640 	.word	0x08006640

080022b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022b4:	f7ff ffdc 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 80022b8:	4601      	mov	r1, r0
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	0b5b      	lsrs	r3, r3, #13
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40023800 	.word	0x40023800
 80022d4:	08006640 	.word	0x08006640

080022d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	220f      	movs	r2, #15
 80022e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_RCC_GetClockConfig+0x5c>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_RCC_GetClockConfig+0x5c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCC_GetClockConfig+0x5c>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_RCC_GetClockConfig+0x5c>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <HAL_RCC_GetClockConfig+0x60>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 020f 	and.w	r2, r3, #15
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	601a      	str	r2, [r3, #0]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	40023c00 	.word	0x40023c00

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002356:	4bc6      	ldr	r3, [pc, #792]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b0c      	cmp	r3, #12
 8002360:	f200 817e 	bhi.w	8002660 <HAL_RCC_GetSysClockFreq+0x324>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <HAL_RCC_GetSysClockFreq+0x30>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	080023a1 	.word	0x080023a1
 8002370:	08002661 	.word	0x08002661
 8002374:	08002661 	.word	0x08002661
 8002378:	08002661 	.word	0x08002661
 800237c:	080023a7 	.word	0x080023a7
 8002380:	08002661 	.word	0x08002661
 8002384:	08002661 	.word	0x08002661
 8002388:	08002661 	.word	0x08002661
 800238c:	080023ad 	.word	0x080023ad
 8002390:	08002661 	.word	0x08002661
 8002394:	08002661 	.word	0x08002661
 8002398:	08002661 	.word	0x08002661
 800239c:	08002509 	.word	0x08002509
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4bb4      	ldr	r3, [pc, #720]	; (8002674 <HAL_RCC_GetSysClockFreq+0x338>)
 80023a2:	613b      	str	r3, [r7, #16]
       break;
 80023a4:	e15f      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023a6:	4bb4      	ldr	r3, [pc, #720]	; (8002678 <HAL_RCC_GetSysClockFreq+0x33c>)
 80023a8:	613b      	str	r3, [r7, #16]
      break;
 80023aa:	e15c      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ac:	4bb0      	ldr	r3, [pc, #704]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023b6:	4bae      	ldr	r3, [pc, #696]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d04a      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c2:	4bab      	ldr	r3, [pc, #684]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	099b      	lsrs	r3, r3, #6
 80023c8:	f04f 0400 	mov.w	r4, #0
 80023cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	ea03 0501 	and.w	r5, r3, r1
 80023d8:	ea04 0602 	and.w	r6, r4, r2
 80023dc:	4629      	mov	r1, r5
 80023de:	4632      	mov	r2, r6
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	f04f 0400 	mov.w	r4, #0
 80023e8:	0154      	lsls	r4, r2, #5
 80023ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023ee:	014b      	lsls	r3, r1, #5
 80023f0:	4619      	mov	r1, r3
 80023f2:	4622      	mov	r2, r4
 80023f4:	1b49      	subs	r1, r1, r5
 80023f6:	eb62 0206 	sbc.w	r2, r2, r6
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	f04f 0400 	mov.w	r4, #0
 8002402:	0194      	lsls	r4, r2, #6
 8002404:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002408:	018b      	lsls	r3, r1, #6
 800240a:	1a5b      	subs	r3, r3, r1
 800240c:	eb64 0402 	sbc.w	r4, r4, r2
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	00e2      	lsls	r2, r4, #3
 800241a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800241e:	00d9      	lsls	r1, r3, #3
 8002420:	460b      	mov	r3, r1
 8002422:	4614      	mov	r4, r2
 8002424:	195b      	adds	r3, r3, r5
 8002426:	eb44 0406 	adc.w	r4, r4, r6
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	0262      	lsls	r2, r4, #9
 8002434:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002438:	0259      	lsls	r1, r3, #9
 800243a:	460b      	mov	r3, r1
 800243c:	4614      	mov	r4, r2
 800243e:	4618      	mov	r0, r3
 8002440:	4621      	mov	r1, r4
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f04f 0400 	mov.w	r4, #0
 8002448:	461a      	mov	r2, r3
 800244a:	4623      	mov	r3, r4
 800244c:	f7fe fb1e 	bl	8000a8c <__aeabi_uldivmod>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e049      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002458:	4b85      	ldr	r3, [pc, #532]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	f04f 0400 	mov.w	r4, #0
 8002462:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	ea03 0501 	and.w	r5, r3, r1
 800246e:	ea04 0602 	and.w	r6, r4, r2
 8002472:	4629      	mov	r1, r5
 8002474:	4632      	mov	r2, r6
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	f04f 0400 	mov.w	r4, #0
 800247e:	0154      	lsls	r4, r2, #5
 8002480:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002484:	014b      	lsls	r3, r1, #5
 8002486:	4619      	mov	r1, r3
 8002488:	4622      	mov	r2, r4
 800248a:	1b49      	subs	r1, r1, r5
 800248c:	eb62 0206 	sbc.w	r2, r2, r6
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	f04f 0400 	mov.w	r4, #0
 8002498:	0194      	lsls	r4, r2, #6
 800249a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800249e:	018b      	lsls	r3, r1, #6
 80024a0:	1a5b      	subs	r3, r3, r1
 80024a2:	eb64 0402 	sbc.w	r4, r4, r2
 80024a6:	f04f 0100 	mov.w	r1, #0
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	00e2      	lsls	r2, r4, #3
 80024b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024b4:	00d9      	lsls	r1, r3, #3
 80024b6:	460b      	mov	r3, r1
 80024b8:	4614      	mov	r4, r2
 80024ba:	195b      	adds	r3, r3, r5
 80024bc:	eb44 0406 	adc.w	r4, r4, r6
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	02a2      	lsls	r2, r4, #10
 80024ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024ce:	0299      	lsls	r1, r3, #10
 80024d0:	460b      	mov	r3, r1
 80024d2:	4614      	mov	r4, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	4621      	mov	r1, r4
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f04f 0400 	mov.w	r4, #0
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	f7fe fad3 	bl	8000a8c <__aeabi_uldivmod>
 80024e6:	4603      	mov	r3, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024ec:	4b60      	ldr	r3, [pc, #384]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	613b      	str	r3, [r7, #16]
      break;
 8002506:	e0ae      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002508:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002510:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002512:	4b57      	ldr	r3, [pc, #348]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04a      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b54      	ldr	r3, [pc, #336]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	f04f 0400 	mov.w	r4, #0
 8002528:	f240 11ff 	movw	r1, #511	; 0x1ff
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	ea03 0501 	and.w	r5, r3, r1
 8002534:	ea04 0602 	and.w	r6, r4, r2
 8002538:	4629      	mov	r1, r5
 800253a:	4632      	mov	r2, r6
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f04f 0400 	mov.w	r4, #0
 8002544:	0154      	lsls	r4, r2, #5
 8002546:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800254a:	014b      	lsls	r3, r1, #5
 800254c:	4619      	mov	r1, r3
 800254e:	4622      	mov	r2, r4
 8002550:	1b49      	subs	r1, r1, r5
 8002552:	eb62 0206 	sbc.w	r2, r2, r6
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f04f 0400 	mov.w	r4, #0
 800255e:	0194      	lsls	r4, r2, #6
 8002560:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002564:	018b      	lsls	r3, r1, #6
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	eb64 0402 	sbc.w	r4, r4, r2
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	00e2      	lsls	r2, r4, #3
 8002576:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800257a:	00d9      	lsls	r1, r3, #3
 800257c:	460b      	mov	r3, r1
 800257e:	4614      	mov	r4, r2
 8002580:	195b      	adds	r3, r3, r5
 8002582:	eb44 0406 	adc.w	r4, r4, r6
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	0262      	lsls	r2, r4, #9
 8002590:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002594:	0259      	lsls	r1, r3, #9
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	4618      	mov	r0, r3
 800259c:	4621      	mov	r1, r4
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f04f 0400 	mov.w	r4, #0
 80025a4:	461a      	mov	r2, r3
 80025a6:	4623      	mov	r3, r4
 80025a8:	f7fe fa70 	bl	8000a8c <__aeabi_uldivmod>
 80025ac:	4603      	mov	r3, r0
 80025ae:	460c      	mov	r4, r1
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e049      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	f04f 0400 	mov.w	r4, #0
 80025be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	ea03 0501 	and.w	r5, r3, r1
 80025ca:	ea04 0602 	and.w	r6, r4, r2
 80025ce:	4629      	mov	r1, r5
 80025d0:	4632      	mov	r2, r6
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	f04f 0400 	mov.w	r4, #0
 80025da:	0154      	lsls	r4, r2, #5
 80025dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025e0:	014b      	lsls	r3, r1, #5
 80025e2:	4619      	mov	r1, r3
 80025e4:	4622      	mov	r2, r4
 80025e6:	1b49      	subs	r1, r1, r5
 80025e8:	eb62 0206 	sbc.w	r2, r2, r6
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	0194      	lsls	r4, r2, #6
 80025f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025fa:	018b      	lsls	r3, r1, #6
 80025fc:	1a5b      	subs	r3, r3, r1
 80025fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	00e2      	lsls	r2, r4, #3
 800260c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002610:	00d9      	lsls	r1, r3, #3
 8002612:	460b      	mov	r3, r1
 8002614:	4614      	mov	r4, r2
 8002616:	195b      	adds	r3, r3, r5
 8002618:	eb44 0406 	adc.w	r4, r4, r6
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	02a2      	lsls	r2, r4, #10
 8002626:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800262a:	0299      	lsls	r1, r3, #10
 800262c:	460b      	mov	r3, r1
 800262e:	4614      	mov	r4, r2
 8002630:	4618      	mov	r0, r3
 8002632:	4621      	mov	r1, r4
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f04f 0400 	mov.w	r4, #0
 800263a:	461a      	mov	r2, r3
 800263c:	4623      	mov	r3, r4
 800263e:	f7fe fa25 	bl	8000a8c <__aeabi_uldivmod>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_GetSysClockFreq+0x334>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0f1b      	lsrs	r3, r3, #28
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	613b      	str	r3, [r7, #16]
      break;
 800265e:	e002      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RCC_GetSysClockFreq+0x338>)
 8002662:	613b      	str	r3, [r7, #16]
      break;
 8002664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002666:	693b      	ldr	r3, [r7, #16]
}
 8002668:	4618      	mov	r0, r3
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	00f42400 	.word	0x00f42400
 8002678:	007a1200 	.word	0x007a1200

0800267c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8083 	beq.w	800279c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002696:	4b95      	ldr	r3, [pc, #596]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d019      	beq.n	80026d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026a2:	4b92      	ldr	r3, [pc, #584]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026ae:	4b8f      	ldr	r3, [pc, #572]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ba:	d00c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026bc:	4b8b      	ldr	r3, [pc, #556]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	d112      	bne.n	80026ee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c8:	4b88      	ldr	r3, [pc, #544]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d4:	d10b      	bne.n	80026ee <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	4b85      	ldr	r3, [pc, #532]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d05b      	beq.n	800279a <HAL_RCC_OscConfig+0x11e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d157      	bne.n	800279a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e216      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x8a>
 80026f8:	4b7c      	ldr	r3, [pc, #496]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7b      	ldr	r2, [pc, #492]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e01d      	b.n	8002742 <HAL_RCC_OscConfig+0xc6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270e:	d10c      	bne.n	800272a <HAL_RCC_OscConfig+0xae>
 8002710:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a75      	ldr	r2, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b73      	ldr	r3, [pc, #460]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a72      	ldr	r2, [pc, #456]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0xc6>
 800272a:	4b70      	ldr	r3, [pc, #448]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6f      	ldr	r2, [pc, #444]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b6d      	ldr	r3, [pc, #436]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6c      	ldr	r2, [pc, #432]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 800273c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d013      	beq.n	8002772 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7ff f9ef 	bl	8001b2c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002752:	f7ff f9eb 	bl	8001b2c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1db      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002764:	4b61      	ldr	r3, [pc, #388]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0xd6>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7ff f9db 	bl	8001b2c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800277a:	f7ff f9d7 	bl	8001b2c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	; 0x64
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1c7      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278c:	4b57      	ldr	r3, [pc, #348]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0xfe>
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d06f      	beq.n	8002888 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d017      	beq.n	80027e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027b4:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d105      	bne.n	80027cc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027cc:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d11c      	bne.n	8002812 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e4:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_OscConfig+0x180>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e18f      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4938      	ldr	r1, [pc, #224]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002810:	e03a      	b.n	8002888 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d020      	beq.n	800285c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281a:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7ff f984 	bl	8001b2c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff f980 	bl	8001b2c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e170      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4925      	ldr	r1, [pc, #148]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
 800285a:	e015      	b.n	8002888 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7ff f963 	bl	8001b2c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286a:	f7ff f95f 	bl	8001b2c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e14f      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d037      	beq.n	8002904 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d016      	beq.n	80028ca <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_RCC_OscConfig+0x278>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7ff f943 	bl	8001b2c <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028aa:	f7ff f93f 	bl	8001b2c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e12f      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x22e>
 80028c8:	e01c      	b.n	8002904 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_RCC_OscConfig+0x278>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7ff f92c 	bl	8001b2c <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d6:	e00f      	b.n	80028f8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d8:	f7ff f928 	bl	8001b2c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d908      	bls.n	80028f8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e118      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	42470000 	.word	0x42470000
 80028f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	4b8a      	ldr	r3, [pc, #552]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e9      	bne.n	80028d8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8097 	beq.w	8002a40 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002916:	4b83      	ldr	r3, [pc, #524]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10f      	bne.n	8002942 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b7f      	ldr	r3, [pc, #508]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a7e      	ldr	r2, [pc, #504]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b79      	ldr	r3, [pc, #484]	; (8002b28 <HAL_RCC_OscConfig+0x4ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d118      	bne.n	8002980 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x4ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a75      	ldr	r2, [pc, #468]	; (8002b28 <HAL_RCC_OscConfig+0x4ac>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295a:	f7ff f8e7 	bl	8001b2c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7ff f8e3 	bl	8001b2c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0d3      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <HAL_RCC_OscConfig+0x4ac>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x31a>
 8002988:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a65      	ldr	r2, [pc, #404]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x354>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x33c>
 800299e:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a60      	ldr	r2, [pc, #384]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	4b5e      	ldr	r3, [pc, #376]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a5d      	ldr	r2, [pc, #372]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x354>
 80029b8:	4b5a      	ldr	r3, [pc, #360]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a59      	ldr	r2, [pc, #356]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a56      	ldr	r2, [pc, #344]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029ca:	f023 0304 	bic.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7ff f8a8 	bl	8001b2c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7ff f8a4 	bl	8001b2c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e092      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ee      	beq.n	80029e0 <HAL_RCC_OscConfig+0x364>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7ff f892 	bl	8001b2c <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7ff f88e 	bl	8001b2c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e07c      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ee      	bne.n	8002a0c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a3a      	ldr	r2, [pc, #232]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d068      	beq.n	8002b1a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a48:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d060      	beq.n	8002b16 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d145      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_RCC_OscConfig+0x4b0>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7ff f863 	bl	8001b2c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7ff f85f 	bl	8001b2c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e04f      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	019b      	lsls	r3, r3, #6
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	071b      	lsls	r3, r3, #28
 8002ab4:	491b      	ldr	r1, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aba:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_RCC_OscConfig+0x4b0>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f834 	bl	8001b2c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7ff f830 	bl	8001b2c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e020      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x44c>
 8002ae6:	e018      	b.n	8002b1a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_OscConfig+0x4b0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7ff f81d 	bl	8001b2c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af6:	f7ff f819 	bl	8001b2c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e009      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_OscConfig+0x4a8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x47a>
 8002b14:	e001      	b.n	8002b1a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	42470060 	.word	0x42470060

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e01d      	b.n	8002b7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fdf4 	bl	8001744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 f982 	bl	8002e78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b06      	cmp	r3, #6
 8002bf6:	d007      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d122      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d11b      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0202 	mvn.w	r2, #2
 8002c42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f8ee 	bl	8002e3a <HAL_TIM_IC_CaptureCallback>
 8002c5e:	e005      	b.n	8002c6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f8e0 	bl	8002e26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8f1 	bl	8002e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d122      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0204 	mvn.w	r2, #4
 8002c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8c4 	bl	8002e3a <HAL_TIM_IC_CaptureCallback>
 8002cb2:	e005      	b.n	8002cc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8b6 	bl	8002e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8c7 	bl	8002e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d122      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d11b      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f06f 0208 	mvn.w	r2, #8
 8002cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f89a 	bl	8002e3a <HAL_TIM_IC_CaptureCallback>
 8002d06:	e005      	b.n	8002d14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f88c 	bl	8002e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f89d 	bl	8002e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d122      	bne.n	8002d6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d11b      	bne.n	8002d6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0210 	mvn.w	r2, #16
 8002d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2208      	movs	r2, #8
 8002d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f870 	bl	8002e3a <HAL_TIM_IC_CaptureCallback>
 8002d5a:	e005      	b.n	8002d68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f862 	bl	8002e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f873 	bl	8002e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10e      	bne.n	8002d9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f06f 0201 	mvn.w	r2, #1
 8002d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fe fc97 	bl	80016c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d10e      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d107      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f903 	bl	8002fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d10e      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d107      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f838 	bl	8002e62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d10e      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d107      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f06f 0220 	mvn.w	r2, #32
 8002e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8cd 	bl	8002fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a40      	ldr	r2, [pc, #256]	; (8002f8c <TIM_Base_SetConfig+0x114>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	d00f      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3d      	ldr	r2, [pc, #244]	; (8002f90 <TIM_Base_SetConfig+0x118>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00b      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <TIM_Base_SetConfig+0x11c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <TIM_Base_SetConfig+0x120>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <TIM_Base_SetConfig+0x124>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d108      	bne.n	8002eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2f      	ldr	r2, [pc, #188]	; (8002f8c <TIM_Base_SetConfig+0x114>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02b      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d027      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <TIM_Base_SetConfig+0x118>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d023      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a2b      	ldr	r2, [pc, #172]	; (8002f94 <TIM_Base_SetConfig+0x11c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01f      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <TIM_Base_SetConfig+0x120>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01b      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <TIM_Base_SetConfig+0x124>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d017      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <TIM_Base_SetConfig+0x128>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <TIM_Base_SetConfig+0x12c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <TIM_Base_SetConfig+0x130>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a25      	ldr	r2, [pc, #148]	; (8002fac <TIM_Base_SetConfig+0x134>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a24      	ldr	r2, [pc, #144]	; (8002fb0 <TIM_Base_SetConfig+0x138>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <TIM_Base_SetConfig+0x13c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <TIM_Base_SetConfig+0x114>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0xf8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <TIM_Base_SetConfig+0x124>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d103      	bne.n	8002f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40010400 	.word	0x40010400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400
 8002fa8:	40014800 	.word	0x40014800
 8002fac:	40001800 	.word	0x40001800
 8002fb0:	40001c00 	.word	0x40001c00
 8002fb4:	40002000 	.word	0x40002000

08002fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e03f      	b.n	8003072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe fbd4 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	; 0x24
 8003010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f90b 	bl	8003240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b088      	sub	sp, #32
 800307e:	af02      	add	r7, sp, #8
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b20      	cmp	r3, #32
 8003098:	f040 8083 	bne.w	80031a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_UART_Transmit+0x2e>
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e07b      	b.n	80031a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Transmit+0x40>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e074      	b.n	80031a4 <HAL_UART_Transmit+0x12a>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2221      	movs	r2, #33	; 0x21
 80030cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030d0:	f7fe fd2c 	bl	8001b2c <HAL_GetTick>
 80030d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	88fa      	ldrh	r2, [r7, #6]
 80030da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030ea:	e042      	b.n	8003172 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d122      	bne.n	800314a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2200      	movs	r2, #0
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f84c 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e042      	b.n	80031a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003130:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3302      	adds	r3, #2
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	e017      	b.n	8003172 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3301      	adds	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	e013      	b.n	8003172 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f829 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e01f      	b.n	80031a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	60ba      	str	r2, [r7, #8]
 800316a:	781a      	ldrb	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1b7      	bne.n	80030ec <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2200      	movs	r2, #0
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f810 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e006      	b.n	80031a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031bc:	e02c      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d028      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x30>
 80031cc:	f7fe fcae 	bl	8001b2c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d21d      	bcs.n	8003218 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e00f      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d0c3      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	b085      	sub	sp, #20
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003282:	f023 030c 	bic.w	r3, r3, #12
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	68f9      	ldr	r1, [r7, #12]
 800328c:	430b      	orrs	r3, r1
 800328e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ae:	f040 818b 	bne.w	80035c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4ac1      	ldr	r2, [pc, #772]	; (80035bc <UART_SetConfig+0x37c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d005      	beq.n	80032c8 <UART_SetConfig+0x88>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4abf      	ldr	r2, [pc, #764]	; (80035c0 <UART_SetConfig+0x380>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f040 80bd 	bne.w	8003442 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c8:	f7fe fff2 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 80032cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	461d      	mov	r5, r3
 80032d2:	f04f 0600 	mov.w	r6, #0
 80032d6:	46a8      	mov	r8, r5
 80032d8:	46b1      	mov	r9, r6
 80032da:	eb18 0308 	adds.w	r3, r8, r8
 80032de:	eb49 0409 	adc.w	r4, r9, r9
 80032e2:	4698      	mov	r8, r3
 80032e4:	46a1      	mov	r9, r4
 80032e6:	eb18 0805 	adds.w	r8, r8, r5
 80032ea:	eb49 0906 	adc.w	r9, r9, r6
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003302:	4688      	mov	r8, r1
 8003304:	4691      	mov	r9, r2
 8003306:	eb18 0005 	adds.w	r0, r8, r5
 800330a:	eb49 0106 	adc.w	r1, r9, r6
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	461d      	mov	r5, r3
 8003314:	f04f 0600 	mov.w	r6, #0
 8003318:	196b      	adds	r3, r5, r5
 800331a:	eb46 0406 	adc.w	r4, r6, r6
 800331e:	461a      	mov	r2, r3
 8003320:	4623      	mov	r3, r4
 8003322:	f7fd fbb3 	bl	8000a8c <__aeabi_uldivmod>
 8003326:	4603      	mov	r3, r0
 8003328:	460c      	mov	r4, r1
 800332a:	461a      	mov	r2, r3
 800332c:	4ba5      	ldr	r3, [pc, #660]	; (80035c4 <UART_SetConfig+0x384>)
 800332e:	fba3 2302 	umull	r2, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	461d      	mov	r5, r3
 800333c:	f04f 0600 	mov.w	r6, #0
 8003340:	46a9      	mov	r9, r5
 8003342:	46b2      	mov	sl, r6
 8003344:	eb19 0309 	adds.w	r3, r9, r9
 8003348:	eb4a 040a 	adc.w	r4, sl, sl
 800334c:	4699      	mov	r9, r3
 800334e:	46a2      	mov	sl, r4
 8003350:	eb19 0905 	adds.w	r9, r9, r5
 8003354:	eb4a 0a06 	adc.w	sl, sl, r6
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003364:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003368:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800336c:	4689      	mov	r9, r1
 800336e:	4692      	mov	sl, r2
 8003370:	eb19 0005 	adds.w	r0, r9, r5
 8003374:	eb4a 0106 	adc.w	r1, sl, r6
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	461d      	mov	r5, r3
 800337e:	f04f 0600 	mov.w	r6, #0
 8003382:	196b      	adds	r3, r5, r5
 8003384:	eb46 0406 	adc.w	r4, r6, r6
 8003388:	461a      	mov	r2, r3
 800338a:	4623      	mov	r3, r4
 800338c:	f7fd fb7e 	bl	8000a8c <__aeabi_uldivmod>
 8003390:	4603      	mov	r3, r0
 8003392:	460c      	mov	r4, r1
 8003394:	461a      	mov	r2, r3
 8003396:	4b8b      	ldr	r3, [pc, #556]	; (80035c4 <UART_SetConfig+0x384>)
 8003398:	fba3 1302 	umull	r1, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	2164      	movs	r1, #100	; 0x64
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	3332      	adds	r3, #50	; 0x32
 80033aa:	4a86      	ldr	r2, [pc, #536]	; (80035c4 <UART_SetConfig+0x384>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033b8:	4498      	add	r8, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	461d      	mov	r5, r3
 80033be:	f04f 0600 	mov.w	r6, #0
 80033c2:	46a9      	mov	r9, r5
 80033c4:	46b2      	mov	sl, r6
 80033c6:	eb19 0309 	adds.w	r3, r9, r9
 80033ca:	eb4a 040a 	adc.w	r4, sl, sl
 80033ce:	4699      	mov	r9, r3
 80033d0:	46a2      	mov	sl, r4
 80033d2:	eb19 0905 	adds.w	r9, r9, r5
 80033d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033ee:	4689      	mov	r9, r1
 80033f0:	4692      	mov	sl, r2
 80033f2:	eb19 0005 	adds.w	r0, r9, r5
 80033f6:	eb4a 0106 	adc.w	r1, sl, r6
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	461d      	mov	r5, r3
 8003400:	f04f 0600 	mov.w	r6, #0
 8003404:	196b      	adds	r3, r5, r5
 8003406:	eb46 0406 	adc.w	r4, r6, r6
 800340a:	461a      	mov	r2, r3
 800340c:	4623      	mov	r3, r4
 800340e:	f7fd fb3d 	bl	8000a8c <__aeabi_uldivmod>
 8003412:	4603      	mov	r3, r0
 8003414:	460c      	mov	r4, r1
 8003416:	461a      	mov	r2, r3
 8003418:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <UART_SetConfig+0x384>)
 800341a:	fba3 1302 	umull	r1, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2164      	movs	r1, #100	; 0x64
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	3332      	adds	r3, #50	; 0x32
 800342c:	4a65      	ldr	r2, [pc, #404]	; (80035c4 <UART_SetConfig+0x384>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 0207 	and.w	r2, r3, #7
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4442      	add	r2, r8
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e26f      	b.n	8003922 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003442:	f7fe ff21 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8003446:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	461d      	mov	r5, r3
 800344c:	f04f 0600 	mov.w	r6, #0
 8003450:	46a8      	mov	r8, r5
 8003452:	46b1      	mov	r9, r6
 8003454:	eb18 0308 	adds.w	r3, r8, r8
 8003458:	eb49 0409 	adc.w	r4, r9, r9
 800345c:	4698      	mov	r8, r3
 800345e:	46a1      	mov	r9, r4
 8003460:	eb18 0805 	adds.w	r8, r8, r5
 8003464:	eb49 0906 	adc.w	r9, r9, r6
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003474:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003478:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800347c:	4688      	mov	r8, r1
 800347e:	4691      	mov	r9, r2
 8003480:	eb18 0005 	adds.w	r0, r8, r5
 8003484:	eb49 0106 	adc.w	r1, r9, r6
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	461d      	mov	r5, r3
 800348e:	f04f 0600 	mov.w	r6, #0
 8003492:	196b      	adds	r3, r5, r5
 8003494:	eb46 0406 	adc.w	r4, r6, r6
 8003498:	461a      	mov	r2, r3
 800349a:	4623      	mov	r3, r4
 800349c:	f7fd faf6 	bl	8000a8c <__aeabi_uldivmod>
 80034a0:	4603      	mov	r3, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <UART_SetConfig+0x384>)
 80034a8:	fba3 2302 	umull	r2, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	461d      	mov	r5, r3
 80034b6:	f04f 0600 	mov.w	r6, #0
 80034ba:	46a9      	mov	r9, r5
 80034bc:	46b2      	mov	sl, r6
 80034be:	eb19 0309 	adds.w	r3, r9, r9
 80034c2:	eb4a 040a 	adc.w	r4, sl, sl
 80034c6:	4699      	mov	r9, r3
 80034c8:	46a2      	mov	sl, r4
 80034ca:	eb19 0905 	adds.w	r9, r9, r5
 80034ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80034d2:	f04f 0100 	mov.w	r1, #0
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e6:	4689      	mov	r9, r1
 80034e8:	4692      	mov	sl, r2
 80034ea:	eb19 0005 	adds.w	r0, r9, r5
 80034ee:	eb4a 0106 	adc.w	r1, sl, r6
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	461d      	mov	r5, r3
 80034f8:	f04f 0600 	mov.w	r6, #0
 80034fc:	196b      	adds	r3, r5, r5
 80034fe:	eb46 0406 	adc.w	r4, r6, r6
 8003502:	461a      	mov	r2, r3
 8003504:	4623      	mov	r3, r4
 8003506:	f7fd fac1 	bl	8000a8c <__aeabi_uldivmod>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	461a      	mov	r2, r3
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <UART_SetConfig+0x384>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2164      	movs	r1, #100	; 0x64
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a27      	ldr	r2, [pc, #156]	; (80035c4 <UART_SetConfig+0x384>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003532:	4498      	add	r8, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	461d      	mov	r5, r3
 8003538:	f04f 0600 	mov.w	r6, #0
 800353c:	46a9      	mov	r9, r5
 800353e:	46b2      	mov	sl, r6
 8003540:	eb19 0309 	adds.w	r3, r9, r9
 8003544:	eb4a 040a 	adc.w	r4, sl, sl
 8003548:	4699      	mov	r9, r3
 800354a:	46a2      	mov	sl, r4
 800354c:	eb19 0905 	adds.w	r9, r9, r5
 8003550:	eb4a 0a06 	adc.w	sl, sl, r6
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003564:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003568:	4689      	mov	r9, r1
 800356a:	4692      	mov	sl, r2
 800356c:	eb19 0005 	adds.w	r0, r9, r5
 8003570:	eb4a 0106 	adc.w	r1, sl, r6
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	461d      	mov	r5, r3
 800357a:	f04f 0600 	mov.w	r6, #0
 800357e:	196b      	adds	r3, r5, r5
 8003580:	eb46 0406 	adc.w	r4, r6, r6
 8003584:	461a      	mov	r2, r3
 8003586:	4623      	mov	r3, r4
 8003588:	f7fd fa80 	bl	8000a8c <__aeabi_uldivmod>
 800358c:	4603      	mov	r3, r0
 800358e:	460c      	mov	r4, r1
 8003590:	461a      	mov	r2, r3
 8003592:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <UART_SetConfig+0x384>)
 8003594:	fba3 1302 	umull	r1, r3, r3, r2
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	2164      	movs	r1, #100	; 0x64
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	3332      	adds	r3, #50	; 0x32
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <UART_SetConfig+0x384>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	f003 0207 	and.w	r2, r3, #7
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4442      	add	r2, r8
 80035b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80035ba:	e1b2      	b.n	8003922 <UART_SetConfig+0x6e2>
 80035bc:	40011000 	.word	0x40011000
 80035c0:	40011400 	.word	0x40011400
 80035c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4ad7      	ldr	r2, [pc, #860]	; (800392c <UART_SetConfig+0x6ec>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d005      	beq.n	80035de <UART_SetConfig+0x39e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4ad6      	ldr	r2, [pc, #856]	; (8003930 <UART_SetConfig+0x6f0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	f040 80d1 	bne.w	8003780 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035de:	f7fe fe67 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 80035e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	469a      	mov	sl, r3
 80035e8:	f04f 0b00 	mov.w	fp, #0
 80035ec:	46d0      	mov	r8, sl
 80035ee:	46d9      	mov	r9, fp
 80035f0:	eb18 0308 	adds.w	r3, r8, r8
 80035f4:	eb49 0409 	adc.w	r4, r9, r9
 80035f8:	4698      	mov	r8, r3
 80035fa:	46a1      	mov	r9, r4
 80035fc:	eb18 080a 	adds.w	r8, r8, sl
 8003600:	eb49 090b 	adc.w	r9, r9, fp
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003610:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003614:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003618:	4688      	mov	r8, r1
 800361a:	4691      	mov	r9, r2
 800361c:	eb1a 0508 	adds.w	r5, sl, r8
 8003620:	eb4b 0609 	adc.w	r6, fp, r9
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4619      	mov	r1, r3
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	0094      	lsls	r4, r2, #2
 8003638:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800363c:	008b      	lsls	r3, r1, #2
 800363e:	461a      	mov	r2, r3
 8003640:	4623      	mov	r3, r4
 8003642:	4628      	mov	r0, r5
 8003644:	4631      	mov	r1, r6
 8003646:	f7fd fa21 	bl	8000a8c <__aeabi_uldivmod>
 800364a:	4603      	mov	r3, r0
 800364c:	460c      	mov	r4, r1
 800364e:	461a      	mov	r2, r3
 8003650:	4bb8      	ldr	r3, [pc, #736]	; (8003934 <UART_SetConfig+0x6f4>)
 8003652:	fba3 2302 	umull	r2, r3, r3, r2
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	469b      	mov	fp, r3
 8003660:	f04f 0c00 	mov.w	ip, #0
 8003664:	46d9      	mov	r9, fp
 8003666:	46e2      	mov	sl, ip
 8003668:	eb19 0309 	adds.w	r3, r9, r9
 800366c:	eb4a 040a 	adc.w	r4, sl, sl
 8003670:	4699      	mov	r9, r3
 8003672:	46a2      	mov	sl, r4
 8003674:	eb19 090b 	adds.w	r9, r9, fp
 8003678:	eb4a 0a0c 	adc.w	sl, sl, ip
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003688:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800368c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003690:	4689      	mov	r9, r1
 8003692:	4692      	mov	sl, r2
 8003694:	eb1b 0509 	adds.w	r5, fp, r9
 8003698:	eb4c 060a 	adc.w	r6, ip, sl
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	f04f 0400 	mov.w	r4, #0
 80036ae:	0094      	lsls	r4, r2, #2
 80036b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036b4:	008b      	lsls	r3, r1, #2
 80036b6:	461a      	mov	r2, r3
 80036b8:	4623      	mov	r3, r4
 80036ba:	4628      	mov	r0, r5
 80036bc:	4631      	mov	r1, r6
 80036be:	f7fd f9e5 	bl	8000a8c <__aeabi_uldivmod>
 80036c2:	4603      	mov	r3, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b9a      	ldr	r3, [pc, #616]	; (8003934 <UART_SetConfig+0x6f4>)
 80036ca:	fba3 1302 	umull	r1, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2164      	movs	r1, #100	; 0x64
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	3332      	adds	r3, #50	; 0x32
 80036dc:	4a95      	ldr	r2, [pc, #596]	; (8003934 <UART_SetConfig+0x6f4>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e8:	4498      	add	r8, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	469b      	mov	fp, r3
 80036ee:	f04f 0c00 	mov.w	ip, #0
 80036f2:	46d9      	mov	r9, fp
 80036f4:	46e2      	mov	sl, ip
 80036f6:	eb19 0309 	adds.w	r3, r9, r9
 80036fa:	eb4a 040a 	adc.w	r4, sl, sl
 80036fe:	4699      	mov	r9, r3
 8003700:	46a2      	mov	sl, r4
 8003702:	eb19 090b 	adds.w	r9, r9, fp
 8003706:	eb4a 0a0c 	adc.w	sl, sl, ip
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003716:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800371a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800371e:	4689      	mov	r9, r1
 8003720:	4692      	mov	sl, r2
 8003722:	eb1b 0509 	adds.w	r5, fp, r9
 8003726:	eb4c 060a 	adc.w	r6, ip, sl
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4619      	mov	r1, r3
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	f04f 0400 	mov.w	r4, #0
 800373c:	0094      	lsls	r4, r2, #2
 800373e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003742:	008b      	lsls	r3, r1, #2
 8003744:	461a      	mov	r2, r3
 8003746:	4623      	mov	r3, r4
 8003748:	4628      	mov	r0, r5
 800374a:	4631      	mov	r1, r6
 800374c:	f7fd f99e 	bl	8000a8c <__aeabi_uldivmod>
 8003750:	4603      	mov	r3, r0
 8003752:	460c      	mov	r4, r1
 8003754:	461a      	mov	r2, r3
 8003756:	4b77      	ldr	r3, [pc, #476]	; (8003934 <UART_SetConfig+0x6f4>)
 8003758:	fba3 1302 	umull	r1, r3, r3, r2
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	2164      	movs	r1, #100	; 0x64
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	3332      	adds	r3, #50	; 0x32
 800376a:	4a72      	ldr	r2, [pc, #456]	; (8003934 <UART_SetConfig+0x6f4>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4442      	add	r2, r8
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	e0d0      	b.n	8003922 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003780:	f7fe fd82 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8003784:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	469a      	mov	sl, r3
 800378a:	f04f 0b00 	mov.w	fp, #0
 800378e:	46d0      	mov	r8, sl
 8003790:	46d9      	mov	r9, fp
 8003792:	eb18 0308 	adds.w	r3, r8, r8
 8003796:	eb49 0409 	adc.w	r4, r9, r9
 800379a:	4698      	mov	r8, r3
 800379c:	46a1      	mov	r9, r4
 800379e:	eb18 080a 	adds.w	r8, r8, sl
 80037a2:	eb49 090b 	adc.w	r9, r9, fp
 80037a6:	f04f 0100 	mov.w	r1, #0
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037ba:	4688      	mov	r8, r1
 80037bc:	4691      	mov	r9, r2
 80037be:	eb1a 0508 	adds.w	r5, sl, r8
 80037c2:	eb4b 0609 	adc.w	r6, fp, r9
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4619      	mov	r1, r3
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	f04f 0400 	mov.w	r4, #0
 80037d8:	0094      	lsls	r4, r2, #2
 80037da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037de:	008b      	lsls	r3, r1, #2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	4628      	mov	r0, r5
 80037e6:	4631      	mov	r1, r6
 80037e8:	f7fd f950 	bl	8000a8c <__aeabi_uldivmod>
 80037ec:	4603      	mov	r3, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b50      	ldr	r3, [pc, #320]	; (8003934 <UART_SetConfig+0x6f4>)
 80037f4:	fba3 2302 	umull	r2, r3, r3, r2
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	469b      	mov	fp, r3
 8003802:	f04f 0c00 	mov.w	ip, #0
 8003806:	46d9      	mov	r9, fp
 8003808:	46e2      	mov	sl, ip
 800380a:	eb19 0309 	adds.w	r3, r9, r9
 800380e:	eb4a 040a 	adc.w	r4, sl, sl
 8003812:	4699      	mov	r9, r3
 8003814:	46a2      	mov	sl, r4
 8003816:	eb19 090b 	adds.w	r9, r9, fp
 800381a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800381e:	f04f 0100 	mov.w	r1, #0
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800382a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800382e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003832:	4689      	mov	r9, r1
 8003834:	4692      	mov	sl, r2
 8003836:	eb1b 0509 	adds.w	r5, fp, r9
 800383a:	eb4c 060a 	adc.w	r6, ip, sl
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4619      	mov	r1, r3
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	f04f 0400 	mov.w	r4, #0
 8003850:	0094      	lsls	r4, r2, #2
 8003852:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003856:	008b      	lsls	r3, r1, #2
 8003858:	461a      	mov	r2, r3
 800385a:	4623      	mov	r3, r4
 800385c:	4628      	mov	r0, r5
 800385e:	4631      	mov	r1, r6
 8003860:	f7fd f914 	bl	8000a8c <__aeabi_uldivmod>
 8003864:	4603      	mov	r3, r0
 8003866:	460c      	mov	r4, r1
 8003868:	461a      	mov	r2, r3
 800386a:	4b32      	ldr	r3, [pc, #200]	; (8003934 <UART_SetConfig+0x6f4>)
 800386c:	fba3 1302 	umull	r1, r3, r3, r2
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	2164      	movs	r1, #100	; 0x64
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	3332      	adds	r3, #50	; 0x32
 800387e:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <UART_SetConfig+0x6f4>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388a:	4498      	add	r8, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	469b      	mov	fp, r3
 8003890:	f04f 0c00 	mov.w	ip, #0
 8003894:	46d9      	mov	r9, fp
 8003896:	46e2      	mov	sl, ip
 8003898:	eb19 0309 	adds.w	r3, r9, r9
 800389c:	eb4a 040a 	adc.w	r4, sl, sl
 80038a0:	4699      	mov	r9, r3
 80038a2:	46a2      	mov	sl, r4
 80038a4:	eb19 090b 	adds.w	r9, r9, fp
 80038a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038c0:	4689      	mov	r9, r1
 80038c2:	4692      	mov	sl, r2
 80038c4:	eb1b 0509 	adds.w	r5, fp, r9
 80038c8:	eb4c 060a 	adc.w	r6, ip, sl
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4619      	mov	r1, r3
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f04f 0400 	mov.w	r4, #0
 80038de:	0094      	lsls	r4, r2, #2
 80038e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038e4:	008b      	lsls	r3, r1, #2
 80038e6:	461a      	mov	r2, r3
 80038e8:	4623      	mov	r3, r4
 80038ea:	4628      	mov	r0, r5
 80038ec:	4631      	mov	r1, r6
 80038ee:	f7fd f8cd 	bl	8000a8c <__aeabi_uldivmod>
 80038f2:	4603      	mov	r3, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <UART_SetConfig+0x6f4>)
 80038fa:	fba3 1302 	umull	r1, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2164      	movs	r1, #100	; 0x64
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	3332      	adds	r3, #50	; 0x32
 800390c:	4a09      	ldr	r2, [pc, #36]	; (8003934 <UART_SetConfig+0x6f4>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4442      	add	r2, r8
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	e7ff      	b.n	8003922 <UART_SetConfig+0x6e2>
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	40011000 	.word	0x40011000
 8003930:	40011400 	.word	0x40011400
 8003934:	51eb851f 	.word	0x51eb851f

08003938 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 0208 	add.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 0208 	add.w	r2, r3, #8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f103 0208 	add.w	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d103      	bne.n	80039fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e00c      	b.n	8003a14 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3308      	adds	r3, #8
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e002      	b.n	8003a08 <vListInsert+0x2e>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d2f6      	bcs.n	8003a02 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6892      	ldr	r2, [r2, #8]
 8003a62:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6852      	ldr	r2, [r2, #4]
 8003a6c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d103      	bne.n	8003a80 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <xQueueGenericReset+0x28>
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	e7fe      	b.n	8003ac6 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8003ac8:	f001 ffb2 	bl	8005a30 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	441a      	add	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	3b01      	subs	r3, #1
 8003afa:	68f9      	ldr	r1, [r7, #12]
 8003afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	441a      	add	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	22ff      	movs	r2, #255	; 0xff
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d114      	bne.n	8003b48 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01a      	beq.n	8003b5c <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3310      	adds	r3, #16
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f8b2 	bl	8004c94 <xTaskRemoveFromEventList>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d012      	beq.n	8003b5c <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <xQueueGenericReset+0xcc>)
 8003b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	e009      	b.n	8003b5c <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3310      	adds	r3, #16
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fef3 	bl	8003938 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3324      	adds	r3, #36	; 0x24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff feee 	bl	8003938 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003b5c:	f001 ff96 	bl	8005a8c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003b60:	2301      	movs	r3, #1
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	e000ed04 	.word	0xe000ed04

08003b70 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <xQueueGenericCreate+0x28>
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	e7fe      	b.n	8003b96 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d006      	beq.n	8003bb6 <xQueueGenericCreate+0x46>
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d101      	bne.n	8003bba <xQueueGenericCreate+0x4a>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueGenericCreate+0x4c>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <xQueueGenericCreate+0x64>
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e7fe      	b.n	8003bd2 <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	3350      	adds	r3, #80	; 0x50
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f002 f843 	bl	8005c64 <pvPortMalloc>
 8003bde:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3350      	adds	r3, #80	; 0x50
 8003bee:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bf0:	79fa      	ldrb	r2, [r7, #7]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f805 	bl	8003c0c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003c02:	6a3b      	ldr	r3, [r7, #32]
    }
 8003c04:	4618      	mov	r0, r3
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e002      	b.n	8003c2e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	69b8      	ldr	r0, [r7, #24]
 8003c3e:	f7ff ff2f 	bl	8003aa0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c62:	2300      	movs	r3, #0
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <xQueueGenericSend+0x30>
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c82:	e7fe      	b.n	8003c82 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <xQueueGenericSend+0x3e>
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <xQueueGenericSend+0x42>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <xQueueGenericSend+0x44>
 8003c96:	2300      	movs	r3, #0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <xQueueGenericSend+0x5c>
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e7fe      	b.n	8003cae <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d103      	bne.n	8003cbe <xQueueGenericSend+0x6a>
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <xQueueGenericSend+0x6e>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <xQueueGenericSend+0x70>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <xQueueGenericSend+0x88>
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	e7fe      	b.n	8003cda <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cdc:	f001 f972 	bl	8004fc4 <xTaskGetSchedulerState>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <xQueueGenericSend+0x98>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <xQueueGenericSend+0x9c>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <xQueueGenericSend+0x9e>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <xQueueGenericSend+0xb6>
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e7fe      	b.n	8003d08 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d0a:	f001 fe91 	bl	8005a30 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <xQueueGenericSend+0xcc>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d129      	bne.n	8003d74 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d26:	f000 fa11 	bl	800414c <prvCopyDataToQueue>
 8003d2a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d010      	beq.n	8003d56 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	3324      	adds	r3, #36	; 0x24
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 ffab 	bl	8004c94 <xTaskRemoveFromEventList>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003d44:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <xQueueGenericSend+0x1f0>)
 8003d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	e00a      	b.n	8003d6c <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <xQueueGenericSend+0x1f0>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003d6c:	f001 fe8e 	bl	8005a8c <vPortExitCritical>
                return pdPASS;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e063      	b.n	8003e3c <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d7a:	f001 fe87 	bl	8005a8c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e05c      	b.n	8003e3c <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d88:	f107 0314 	add.w	r3, r7, #20
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 ffe3 	bl	8004d58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d96:	f001 fe79 	bl	8005a8c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d9a:	f000 fd51 	bl	8004840 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d9e:	f001 fe47 	bl	8005a30 <vPortEnterCritical>
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d103      	bne.n	8003db8 <xQueueGenericSend+0x164>
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d103      	bne.n	8003dce <xQueueGenericSend+0x17a>
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dce:	f001 fe5d 	bl	8005a8c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dd2:	1d3a      	adds	r2, r7, #4
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 ffd2 	bl	8004d84 <xTaskCheckForTimeOut>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d124      	bne.n	8003e30 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de8:	f000 faa8 	bl	800433c <prvIsQueueFull>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	3310      	adds	r3, #16
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fefc 	bl	8004bf8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e02:	f000 fa33 	bl	800426c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003e06:	f000 fd29 	bl	800485c <xTaskResumeAll>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f47f af7c 	bne.w	8003d0a <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <xQueueGenericSend+0x1f0>)
 8003e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	e772      	b.n	8003d0a <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e26:	f000 fa21 	bl	800426c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e2a:	f000 fd17 	bl	800485c <xTaskResumeAll>
 8003e2e:	e76c      	b.n	8003d0a <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e32:	f000 fa1b 	bl	800426c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e36:	f000 fd11 	bl	800485c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003e3a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3738      	adds	r7, #56	; 0x38
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b090      	sub	sp, #64	; 0x40
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <xQueueGenericSendFromISR+0x2c>
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e72:	e7fe      	b.n	8003e72 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <xQueueGenericSendFromISR+0x3a>
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <xQueueGenericSendFromISR+0x3e>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <xQueueGenericSendFromISR+0x40>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <xQueueGenericSendFromISR+0x58>
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	e7fe      	b.n	8003e9e <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d103      	bne.n	8003eae <xQueueGenericSendFromISR+0x66>
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <xQueueGenericSendFromISR+0x6a>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueGenericSendFromISR+0x6c>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <xQueueGenericSendFromISR+0x84>
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	e7fe      	b.n	8003eca <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ecc:	f001 fe8c 	bl	8005be8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003ed0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d302      	bcc.n	8003efe <xQueueGenericSendFromISR+0xb6>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d13d      	bne.n	8003f7a <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f14:	f000 f91a 	bl	800414c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003f18:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d112      	bne.n	8003f48 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d024      	beq.n	8003f74 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	3324      	adds	r3, #36	; 0x24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 feb0 	bl	8004c94 <xTaskRemoveFromEventList>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d019      	beq.n	8003f74 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e015      	b.n	8003f74 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003f48:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f4e:	d109      	bne.n	8003f64 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e7fe      	b.n	8003f62 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f68:	3301      	adds	r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003f74:	2301      	movs	r3, #1
 8003f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003f78:	e001      	b.n	8003f7e <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3740      	adds	r7, #64	; 0x40
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <xQueueReceive+0x2e>
        __asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	623b      	str	r3, [r7, #32]
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d103      	bne.n	8003fd0 <xQueueReceive+0x3c>
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <xQueueReceive+0x40>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <xQueueReceive+0x42>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <xQueueReceive+0x5a>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	e7fe      	b.n	8003fec <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fee:	f000 ffe9 	bl	8004fc4 <xTaskGetSchedulerState>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <xQueueReceive+0x6a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <xQueueReceive+0x6e>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <xQueueReceive+0x70>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <xQueueReceive+0x88>
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	e7fe      	b.n	800401a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800401c:	f001 fd08 	bl	8005a30 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01f      	beq.n	800406c <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004030:	f000 f8f6 	bl	8004220 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	1e5a      	subs	r2, r3, #1
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00f      	beq.n	8004064 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	3310      	adds	r3, #16
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fe23 	bl	8004c94 <xTaskRemoveFromEventList>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004054:	4b3c      	ldr	r3, [pc, #240]	; (8004148 <xQueueReceive+0x1b4>)
 8004056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004064:	f001 fd12 	bl	8005a8c <vPortExitCritical>
                return pdPASS;
 8004068:	2301      	movs	r3, #1
 800406a:	e069      	b.n	8004140 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d103      	bne.n	800407a <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004072:	f001 fd0b 	bl	8005a8c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004076:	2300      	movs	r3, #0
 8004078:	e062      	b.n	8004140 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004080:	f107 0310 	add.w	r3, r7, #16
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fe67 	bl	8004d58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800408e:	f001 fcfd 	bl	8005a8c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004092:	f000 fbd5 	bl	8004840 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004096:	f001 fccb 	bl	8005a30 <vPortEnterCritical>
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d103      	bne.n	80040b0 <xQueueReceive+0x11c>
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040b6:	b25b      	sxtb	r3, r3
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d103      	bne.n	80040c6 <xQueueReceive+0x132>
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c6:	f001 fce1 	bl	8005a8c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ca:	1d3a      	adds	r2, r7, #4
 80040cc:	f107 0310 	add.w	r3, r7, #16
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fe56 	bl	8004d84 <xTaskCheckForTimeOut>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d123      	bne.n	8004126 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e0:	f000 f916 	bl	8004310 <prvIsQueueEmpty>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d017      	beq.n	800411a <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fd80 	bl	8004bf8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80040f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040fa:	f000 f8b7 	bl	800426c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80040fe:	f000 fbad 	bl	800485c <xTaskResumeAll>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d189      	bne.n	800401c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8004108:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <xQueueReceive+0x1b4>)
 800410a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	e780      	b.n	800401c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800411a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800411c:	f000 f8a6 	bl	800426c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004120:	f000 fb9c 	bl	800485c <xTaskResumeAll>
 8004124:	e77a      	b.n	800401c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004128:	f000 f8a0 	bl	800426c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800412c:	f000 fb96 	bl	800485c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004132:	f000 f8ed 	bl	8004310 <prvIsQueueEmpty>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	f43f af6f 	beq.w	800401c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800413e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004140:	4618      	mov	r0, r3
 8004142:	3730      	adds	r7, #48	; 0x30
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d14d      	bne.n	800420e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 ff42 	bl	8005000 <xTaskPriorityDisinherit>
 800417c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	e043      	b.n	800420e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d119      	bne.n	80041c0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6858      	ldr	r0, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	461a      	mov	r2, r3
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	f001 fdf2 	bl	8005d80 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	441a      	add	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d32b      	bcc.n	800420e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	e026      	b.n	800420e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68d8      	ldr	r0, [r3, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	461a      	mov	r2, r3
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	f001 fdd8 	bl	8005d80 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	425b      	negs	r3, r3
 80041da:	441a      	add	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d207      	bcs.n	80041fc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	425b      	negs	r3, r3
 80041f6:	441a      	add	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d105      	bne.n	800420e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3b01      	subs	r3, #1
 800420c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004216:	697b      	ldr	r3, [r7, #20]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d018      	beq.n	8004264 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	441a      	add	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	d303      	bcc.n	8004254 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68d9      	ldr	r1, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	461a      	mov	r2, r3
 800425e:	6838      	ldr	r0, [r7, #0]
 8004260:	f001 fd8e 	bl	8005d80 <memcpy>
    }
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004274:	f001 fbdc 	bl	8005a30 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800427e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004280:	e011      	b.n	80042a6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3324      	adds	r3, #36	; 0x24
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fd00 	bl	8004c94 <xTaskRemoveFromEventList>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800429a:	f000 fdd7 	bl	8004e4c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dce9      	bgt.n	8004282 <prvUnlockQueue+0x16>
 80042ae:	e000      	b.n	80042b2 <prvUnlockQueue+0x46>
                        break;
 80042b0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	22ff      	movs	r2, #255	; 0xff
 80042b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80042ba:	f001 fbe7 	bl	8005a8c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80042be:	f001 fbb7 	bl	8005a30 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042c8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80042ca:	e011      	b.n	80042f0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3310      	adds	r3, #16
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fcdb 	bl	8004c94 <xTaskRemoveFromEventList>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80042e4:	f000 fdb2 	bl	8004e4c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80042e8:	7bbb      	ldrb	r3, [r7, #14]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80042f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	dce9      	bgt.n	80042cc <prvUnlockQueue+0x60>
 80042f8:	e000      	b.n	80042fc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80042fa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	22ff      	movs	r2, #255	; 0xff
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004304:	f001 fbc2 	bl	8005a8c <vPortExitCritical>
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004318:	f001 fb8a 	bl	8005a30 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004324:	2301      	movs	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e001      	b.n	800432e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800432e:	f001 fbad 	bl	8005a8c <vPortExitCritical>

    return xReturn;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004344:	f001 fb74 	bl	8005a30 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	429a      	cmp	r2, r3
 8004352:	d102      	bne.n	800435a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e001      	b.n	800435e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800435e:	f001 fb95 	bl	8005a8c <vPortExitCritical>

    return xReturn;
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	e014      	b.n	80043a6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800437c:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <vQueueAddToRegistry+0x4c>)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004388:	490b      	ldr	r1, [pc, #44]	; (80043b8 <vQueueAddToRegistry+0x4c>)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <vQueueAddToRegistry+0x4c>)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800439e:	e005      	b.n	80043ac <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b07      	cmp	r3, #7
 80043aa:	d9e7      	bls.n	800437c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	20012f58 	.word	0x20012f58

080043bc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80043cc:	f001 fb30 	bl	8005a30 <vPortEnterCritical>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d103      	bne.n	80043e6 <vQueueWaitForMessageRestricted+0x2a>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d103      	bne.n	80043fc <vQueueWaitForMessageRestricted+0x40>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043fc:	f001 fb46 	bl	8005a8c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	3324      	adds	r3, #36	; 0x24
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fc15 	bl	8004c40 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004416:	6978      	ldr	r0, [r7, #20]
 8004418:	f7ff ff28 	bl	800426c <prvUnlockQueue>
    }
 800441c:	bf00      	nop
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004424:	b580      	push	{r7, lr}
 8004426:	b08c      	sub	sp, #48	; 0x30
 8004428:	af04      	add	r7, sp, #16
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fc13 	bl	8005c64 <pvPortMalloc>
 800443e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00e      	beq.n	8004464 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004446:	2058      	movs	r0, #88	; 0x58
 8004448:	f001 fc0c 	bl	8005c64 <pvPortMalloc>
 800444c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
 800445a:	e005      	b.n	8004468 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800445c:	6978      	ldr	r0, [r7, #20]
 800445e:	f001 fc4d 	bl	8005cfc <vPortFree>
 8004462:	e001      	b.n	8004468 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d013      	beq.n	8004496 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	2300      	movs	r3, #0
 8004472:	9303      	str	r3, [sp, #12]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	9302      	str	r3, [sp, #8]
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f80e 	bl	80044a6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800448a:	69f8      	ldr	r0, [r7, #28]
 800448c:	f000 f8a0 	bl	80045d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004490:	2301      	movs	r3, #1
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e002      	b.n	800449c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
 800449a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800449c:	69bb      	ldr	r3, [r7, #24]
    }
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b088      	sub	sp, #32
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	461a      	mov	r2, r3
 80044be:	21a5      	movs	r1, #165	; 0xa5
 80044c0:	f001 fc69 	bl	8005d96 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044ce:	3b01      	subs	r3, #1
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f023 0307 	bic.w	r3, r3, #7
 80044dc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <prvInitialiseNewTask+0x56>
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e7fe      	b.n	80044fa <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01f      	beq.n	8004542 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e012      	b.n	800452e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	7819      	ldrb	r1, [r3, #0]
 8004510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	3334      	adds	r3, #52	; 0x34
 8004518:	460a      	mov	r2, r1
 800451a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	3301      	adds	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	2b09      	cmp	r3, #9
 8004532:	d9e9      	bls.n	8004508 <prvInitialiseNewTask+0x62>
 8004534:	e000      	b.n	8004538 <prvInitialiseNewTask+0x92>
            {
                break;
 8004536:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004540:	e003      	b.n	800454a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	2b04      	cmp	r3, #4
 800454e:	d901      	bls.n	8004554 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004550:	2304      	movs	r3, #4
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004558:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	3304      	adds	r3, #4
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fa04 	bl	8003978 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	3318      	adds	r3, #24
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff f9ff 	bl	8003978 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	f1c3 0205 	rsb	r2, r3, #5
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	3350      	adds	r3, #80	; 0x50
 8004594:	2204      	movs	r2, #4
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f001 fbfc 	bl	8005d96 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	3354      	adds	r3, #84	; 0x54
 80045a2:	2201      	movs	r2, #1
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 fbf5 	bl	8005d96 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	69b8      	ldr	r0, [r7, #24]
 80045b2:	f001 f911 	bl	80057d8 <pxPortInitialiseStack>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045c8:	bf00      	nop
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80045d8:	f001 fa2a 	bl	8005a30 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80045dc:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <prvAddNewTaskToReadyList+0xc0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <prvAddNewTaskToReadyList+0xc0>)
 80045e4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80045e6:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80045ee:	4a29      	ldr	r2, [pc, #164]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045f4:	4b26      	ldr	r3, [pc, #152]	; (8004690 <prvAddNewTaskToReadyList+0xc0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d110      	bne.n	800461e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80045fc:	f000 fc4a 	bl	8004e94 <prvInitialiseTaskLists>
 8004600:	e00d      	b.n	800461e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004602:	4b25      	ldr	r3, [pc, #148]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	429a      	cmp	r2, r3
 8004616:	d802      	bhi.n	800461e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800461e:	4b1f      	ldr	r3, [pc, #124]	; (800469c <prvAddNewTaskToReadyList+0xcc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a1d      	ldr	r2, [pc, #116]	; (800469c <prvAddNewTaskToReadyList+0xcc>)
 8004626:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004628:	4b1c      	ldr	r3, [pc, #112]	; (800469c <prvAddNewTaskToReadyList+0xcc>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	2201      	movs	r2, #1
 8004636:	409a      	lsls	r2, r3
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <prvAddNewTaskToReadyList+0xd0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	4a18      	ldr	r2, [pc, #96]	; (80046a0 <prvAddNewTaskToReadyList+0xd0>)
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <prvAddNewTaskToReadyList+0xd4>)
 8004650:	441a      	add	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7ff f99a 	bl	8003992 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800465e:	f001 fa15 	bl	8005a8c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00e      	beq.n	8004688 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	429a      	cmp	r2, r3
 8004676:	d207      	bcs.n	8004688 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <prvAddNewTaskToReadyList+0xd8>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200001d4 	.word	0x200001d4
 8004694:	200000fc 	.word	0x200000fc
 8004698:	200001e0 	.word	0x200001e0
 800469c:	200001f0 	.word	0x200001f0
 80046a0:	200001dc 	.word	0x200001dc
 80046a4:	20000100 	.word	0x20000100
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <vTaskDelayUntil>:

#if ( INCLUDE_vTaskDelayUntil == 1 )

    void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                          const TickType_t xTimeIncrement )
    {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <vTaskDelayUntil+0x28>
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e7fe      	b.n	80046d2 <vTaskDelayUntil+0x26>
        configASSERT( ( xTimeIncrement > 0U ) );
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <vTaskDelayUntil+0x42>
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e7fe      	b.n	80046ec <vTaskDelayUntil+0x40>
        configASSERT( uxSchedulerSuspended == 0 );
 80046ee:	4b2b      	ldr	r3, [pc, #172]	; (800479c <vTaskDelayUntil+0xf0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <vTaskDelayUntil+0x5e>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e7fe      	b.n	8004708 <vTaskDelayUntil+0x5c>

        vTaskSuspendAll();
 800470a:	f000 f899 	bl	8004840 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800470e:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <vTaskDelayUntil+0xf4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            if(pxPreviousWakeTime == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d100      	bne.n	800471c <vTaskDelayUntil+0x70>
            {
            	while(1);
 800471a:	e7fe      	b.n	800471a <vTaskDelayUntil+0x6e>
            }
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	4413      	add	r3, r2
 8004724:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	429a      	cmp	r2, r3
 800472e:	d20b      	bcs.n	8004748 <vTaskDelayUntil+0x9c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	429a      	cmp	r2, r3
 8004738:	d211      	bcs.n	800475e <vTaskDelayUntil+0xb2>
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	429a      	cmp	r2, r3
 8004740:	d90d      	bls.n	800475e <vTaskDelayUntil+0xb2>
                {
                    xShouldDelay = pdTRUE;
 8004742:	2301      	movs	r3, #1
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
 8004746:	e00a      	b.n	800475e <vTaskDelayUntil+0xb2>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	429a      	cmp	r2, r3
 8004750:	d303      	bcc.n	800475a <vTaskDelayUntil+0xae>
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	429a      	cmp	r2, r3
 8004758:	d901      	bls.n	800475e <vTaskDelayUntil+0xb2>
                {
                    xShouldDelay = pdTRUE;
 800475a:	2301      	movs	r3, #1
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d006      	beq.n	8004778 <vTaskDelayUntil+0xcc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fcbc 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004778:	f000 f870 	bl	800485c <xTaskResumeAll>
 800477c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <vTaskDelayUntil+0xe8>
        {
            portYIELD_WITHIN_API();
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <vTaskDelayUntil+0xf8>)
 8004786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004794:	bf00      	nop
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	200001fc 	.word	0x200001fc
 80047a0:	200001d8 	.word	0x200001d8
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80047ae:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <vTaskStartScheduler+0x80>)
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	2282      	movs	r2, #130	; 0x82
 80047ba:	491c      	ldr	r1, [pc, #112]	; (800482c <vTaskStartScheduler+0x84>)
 80047bc:	481c      	ldr	r0, [pc, #112]	; (8004830 <vTaskStartScheduler+0x88>)
 80047be:	f7ff fe31 	bl	8004424 <xTaskCreate>
 80047c2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d102      	bne.n	80047d0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80047ca:	f000 fcf7 	bl	80051bc <xTimerCreateTimerTask>
 80047ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d115      	bne.n	8004802 <vTaskStartScheduler+0x5a>
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80047e8:	4b12      	ldr	r3, [pc, #72]	; (8004834 <vTaskStartScheduler+0x8c>)
 80047ea:	f04f 32ff 	mov.w	r2, #4294967295
 80047ee:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <vTaskStartScheduler+0x90>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <vTaskStartScheduler+0x94>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80047fc:	f001 f87a 	bl	80058f4 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8004800:	e00d      	b.n	800481e <vTaskStartScheduler+0x76>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d109      	bne.n	800481e <vTaskStartScheduler+0x76>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e7fe      	b.n	800481c <vTaskStartScheduler+0x74>
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200001f8 	.word	0x200001f8
 800482c:	08006618 	.word	0x08006618
 8004830:	08004e65 	.word	0x08004e65
 8004834:	200001f4 	.word	0x200001f4
 8004838:	200001e0 	.word	0x200001e0
 800483c:	200001d8 	.word	0x200001d8

08004840 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <vTaskSuspendAll+0x18>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	4a03      	ldr	r2, [pc, #12]	; (8004858 <vTaskSuspendAll+0x18>)
 800484c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800484e:	bf00      	nop
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	200001fc 	.word	0x200001fc

0800485c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800486a:	4b41      	ldr	r3, [pc, #260]	; (8004970 <xTaskResumeAll+0x114>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <xTaskResumeAll+0x2a>
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	e7fe      	b.n	8004884 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004886:	f001 f8d3 	bl	8005a30 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800488a:	4b39      	ldr	r3, [pc, #228]	; (8004970 <xTaskResumeAll+0x114>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	4a37      	ldr	r2, [pc, #220]	; (8004970 <xTaskResumeAll+0x114>)
 8004892:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <xTaskResumeAll+0x114>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d161      	bne.n	8004960 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800489c:	4b35      	ldr	r3, [pc, #212]	; (8004974 <xTaskResumeAll+0x118>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d05d      	beq.n	8004960 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048a4:	e02e      	b.n	8004904 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a6:	4b34      	ldr	r3, [pc, #208]	; (8004978 <xTaskResumeAll+0x11c>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3318      	adds	r3, #24
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f8ca 	bl	8003a4c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff f8c5 	bl	8003a4c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	2201      	movs	r2, #1
 80048c8:	409a      	lsls	r2, r3
 80048ca:	4b2c      	ldr	r3, [pc, #176]	; (800497c <xTaskResumeAll+0x120>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	4a2a      	ldr	r2, [pc, #168]	; (800497c <xTaskResumeAll+0x120>)
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4a27      	ldr	r2, [pc, #156]	; (8004980 <xTaskResumeAll+0x124>)
 80048e2:	441a      	add	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f7ff f851 	bl	8003992 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4b23      	ldr	r3, [pc, #140]	; (8004984 <xTaskResumeAll+0x128>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 80048fe:	4b22      	ldr	r3, [pc, #136]	; (8004988 <xTaskResumeAll+0x12c>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <xTaskResumeAll+0x11c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1cc      	bne.n	80048a6 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004912:	f000 fb3b 	bl	8004f8c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004916:	4b1d      	ldr	r3, [pc, #116]	; (800498c <xTaskResumeAll+0x130>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004922:	f000 f847 	bl	80049b4 <xTaskIncrementTick>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 800492c:	4b16      	ldr	r3, [pc, #88]	; (8004988 <xTaskResumeAll+0x12c>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3b01      	subs	r3, #1
 8004936:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f1      	bne.n	8004922 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <xTaskResumeAll+0x130>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <xTaskResumeAll+0x12c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <xTaskResumeAll+0x134>)
 8004952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004960:	f001 f894 	bl	8005a8c <vPortExitCritical>

    return xAlreadyYielded;
 8004964:	68bb      	ldr	r3, [r7, #8]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200001fc 	.word	0x200001fc
 8004974:	200001d4 	.word	0x200001d4
 8004978:	20000194 	.word	0x20000194
 800497c:	200001dc 	.word	0x200001dc
 8004980:	20000100 	.word	0x20000100
 8004984:	200000fc 	.word	0x200000fc
 8004988:	200001e8 	.word	0x200001e8
 800498c:	200001e4 	.word	0x200001e4
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <xTaskGetTickCount+0x1c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80049a0:	687b      	ldr	r3, [r7, #4]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	200001d8 	.word	0x200001d8

080049b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049be:	4b4e      	ldr	r3, [pc, #312]	; (8004af8 <xTaskIncrementTick+0x144>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 808d 	bne.w	8004ae2 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049c8:	4b4c      	ldr	r3, [pc, #304]	; (8004afc <xTaskIncrementTick+0x148>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80049d0:	4a4a      	ldr	r2, [pc, #296]	; (8004afc <xTaskIncrementTick+0x148>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11f      	bne.n	8004a1c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80049dc:	4b48      	ldr	r3, [pc, #288]	; (8004b00 <xTaskIncrementTick+0x14c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <xTaskIncrementTick+0x46>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	e7fe      	b.n	80049f8 <xTaskIncrementTick+0x44>
 80049fa:	4b41      	ldr	r3, [pc, #260]	; (8004b00 <xTaskIncrementTick+0x14c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <xTaskIncrementTick+0x150>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a3e      	ldr	r2, [pc, #248]	; (8004b00 <xTaskIncrementTick+0x14c>)
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4a3e      	ldr	r2, [pc, #248]	; (8004b04 <xTaskIncrementTick+0x150>)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <xTaskIncrementTick+0x154>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	4a3c      	ldr	r2, [pc, #240]	; (8004b08 <xTaskIncrementTick+0x154>)
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	f000 fab8 	bl	8004f8c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <xTaskIncrementTick+0x158>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d348      	bcc.n	8004ab8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <xTaskIncrementTick+0x14c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a30:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <xTaskIncrementTick+0x158>)
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295
 8004a36:	601a      	str	r2, [r3, #0]
                    break;
 8004a38:	e03e      	b.n	8004ab8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a3a:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <xTaskIncrementTick+0x14c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d203      	bcs.n	8004a5a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004a52:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <xTaskIncrementTick+0x158>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a58:	e02e      	b.n	8004ab8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fff4 	bl	8003a4c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	3318      	adds	r3, #24
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe ffeb 	bl	8003a4c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <xTaskIncrementTick+0x15c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <xTaskIncrementTick+0x15c>)
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <xTaskIncrementTick+0x160>)
 8004a96:	441a      	add	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f7fe ff77 	bl	8003992 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <xTaskIncrementTick+0x164>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3b9      	bcc.n	8004a26 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab6:	e7b6      	b.n	8004a26 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <xTaskIncrementTick+0x164>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	4915      	ldr	r1, [pc, #84]	; (8004b14 <xTaskIncrementTick+0x160>)
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d901      	bls.n	8004ad4 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <xTaskIncrementTick+0x168>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e004      	b.n	8004aec <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <xTaskIncrementTick+0x16c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	4a0d      	ldr	r2, [pc, #52]	; (8004b20 <xTaskIncrementTick+0x16c>)
 8004aea:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004aec:	697b      	ldr	r3, [r7, #20]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	200001fc 	.word	0x200001fc
 8004afc:	200001d8 	.word	0x200001d8
 8004b00:	2000018c 	.word	0x2000018c
 8004b04:	20000190 	.word	0x20000190
 8004b08:	200001ec 	.word	0x200001ec
 8004b0c:	200001f4 	.word	0x200001f4
 8004b10:	200001dc 	.word	0x200001dc
 8004b14:	20000100 	.word	0x20000100
 8004b18:	200000fc 	.word	0x200000fc
 8004b1c:	200001e8 	.word	0x200001e8
 8004b20:	200001e4 	.word	0x200001e4

08004b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b2a:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <vTaskSwitchContext+0xc0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004b32:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <vTaskSwitchContext+0xc4>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004b38:	e04f      	b.n	8004bda <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8004b3a:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <vTaskSwitchContext+0xc4>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8004b40:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <vTaskSwitchContext+0xc8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b29      	ldr	r3, [pc, #164]	; (8004bec <vTaskSwitchContext+0xc8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d808      	bhi.n	8004b62 <vTaskSwitchContext+0x3e>
 8004b50:	4b26      	ldr	r3, [pc, #152]	; (8004bec <vTaskSwitchContext+0xc8>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <vTaskSwitchContext+0xc8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3334      	adds	r3, #52	; 0x34
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	f7fc fefb 	bl	8001958 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <vTaskSwitchContext+0xcc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004b70:	7afb      	ldrb	r3, [r7, #11]
 8004b72:	f1c3 031f 	rsb	r3, r3, #31
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	491e      	ldr	r1, [pc, #120]	; (8004bf4 <vTaskSwitchContext+0xd0>)
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <vTaskSwitchContext+0x7c>
        __asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e7fe      	b.n	8004b9e <vTaskSwitchContext+0x7a>
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <vTaskSwitchContext+0xd0>)
 8004bac:	4413      	add	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d104      	bne.n	8004bd0 <vTaskSwitchContext+0xac>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	605a      	str	r2, [r3, #4]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4a05      	ldr	r2, [pc, #20]	; (8004bec <vTaskSwitchContext+0xc8>)
 8004bd8:	6013      	str	r3, [r2, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200001fc 	.word	0x200001fc
 8004be8:	200001e8 	.word	0x200001e8
 8004bec:	200000fc 	.word	0x200000fc
 8004bf0:	200001dc 	.word	0x200001dc
 8004bf4:	20000100 	.word	0x20000100

08004bf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <vTaskPlaceOnEventList+0x24>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e7fe      	b.n	8004c1a <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <vTaskPlaceOnEventList+0x44>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3318      	adds	r3, #24
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7fe fed8 	bl	80039da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	6838      	ldr	r0, [r7, #0]
 8004c2e:	f000 fa5f 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	200000fc 	.word	0x200000fc

08004c40 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <vTaskPlaceOnEventListRestricted+0x26>
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e7fe      	b.n	8004c64 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <vTaskPlaceOnEventListRestricted+0x50>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3318      	adds	r3, #24
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7fe fe8f 	bl	8003992 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	68b8      	ldr	r0, [r7, #8]
 8004c84:	f000 fa34 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
    }
 8004c88:	bf00      	nop
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	200000fc 	.word	0x200000fc

08004c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <xTaskRemoveFromEventList+0x2a>
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e7fe      	b.n	8004cbc <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3318      	adds	r3, #24
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fec2 	bl	8003a4c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <xTaskRemoveFromEventList+0xac>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d11c      	bne.n	8004d0a <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fe feb9 	bl	8003a4c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	2201      	movs	r2, #1
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <xTaskRemoveFromEventList+0xb0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	4a16      	ldr	r2, [pc, #88]	; (8004d44 <xTaskRemoveFromEventList+0xb0>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <xTaskRemoveFromEventList+0xb4>)
 8004cfa:	441a      	add	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7fe fe45 	bl	8003992 <vListInsertEnd>
 8004d08:	e005      	b.n	8004d16 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	4619      	mov	r1, r3
 8004d10:	480e      	ldr	r0, [pc, #56]	; (8004d4c <xTaskRemoveFromEventList+0xb8>)
 8004d12:	f7fe fe3e 	bl	8003992 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <xTaskRemoveFromEventList+0xbc>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d905      	bls.n	8004d30 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <xTaskRemoveFromEventList+0xc0>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e001      	b.n	8004d34 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004d34:	697b      	ldr	r3, [r7, #20]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200001fc 	.word	0x200001fc
 8004d44:	200001dc 	.word	0x200001dc
 8004d48:	20000100 	.word	0x20000100
 8004d4c:	20000194 	.word	0x20000194
 8004d50:	200000fc 	.word	0x200000fc
 8004d54:	200001e8 	.word	0x200001e8

08004d58 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <vTaskInternalSetTimeOutState+0x24>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <vTaskInternalSetTimeOutState+0x28>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	200001ec 	.word	0x200001ec
 8004d80:	200001d8 	.word	0x200001d8

08004d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <xTaskCheckForTimeOut+0x24>
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	e7fe      	b.n	8004da6 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <xTaskCheckForTimeOut+0x3e>
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e7fe      	b.n	8004dc0 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8004dc2:	f000 fe35 	bl	8005a30 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004dc6:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <xTaskCheckForTimeOut+0xc0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d102      	bne.n	8004de6 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e026      	b.n	8004e34 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <xTaskCheckForTimeOut+0xc4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d00a      	beq.n	8004e08 <xTaskCheckForTimeOut+0x84>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d305      	bcc.n	8004e08 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e015      	b.n	8004e34 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d20b      	bcs.n	8004e2a <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	1ad2      	subs	r2, r2, r3
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff ff9a 	bl	8004d58 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e004      	b.n	8004e34 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004e34:	f000 fe2a 	bl	8005a8c <vPortExitCritical>

    return xReturn;
 8004e38:	69fb      	ldr	r3, [r7, #28]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200001d8 	.word	0x200001d8
 8004e48:	200001ec 	.word	0x200001ec

08004e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <vTaskMissedYield+0x14>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	200001e8 	.word	0x200001e8

08004e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004e6c:	f000 f852 	bl	8004f14 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <prvIdleTask+0x28>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d9f9      	bls.n	8004e6c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <prvIdleTask+0x2c>)
 8004e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004e88:	e7f0      	b.n	8004e6c <prvIdleTask+0x8>
 8004e8a:	bf00      	nop
 8004e8c:	20000100 	.word	0x20000100
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	e00c      	b.n	8004eba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <prvInitialiseTaskLists+0x60>)
 8004eac:	4413      	add	r3, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fd42 	bl	8003938 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d9ef      	bls.n	8004ea0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004ec0:	480d      	ldr	r0, [pc, #52]	; (8004ef8 <prvInitialiseTaskLists+0x64>)
 8004ec2:	f7fe fd39 	bl	8003938 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004ec6:	480d      	ldr	r0, [pc, #52]	; (8004efc <prvInitialiseTaskLists+0x68>)
 8004ec8:	f7fe fd36 	bl	8003938 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004ecc:	480c      	ldr	r0, [pc, #48]	; (8004f00 <prvInitialiseTaskLists+0x6c>)
 8004ece:	f7fe fd33 	bl	8003938 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004ed2:	480c      	ldr	r0, [pc, #48]	; (8004f04 <prvInitialiseTaskLists+0x70>)
 8004ed4:	f7fe fd30 	bl	8003938 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004ed8:	480b      	ldr	r0, [pc, #44]	; (8004f08 <prvInitialiseTaskLists+0x74>)
 8004eda:	f7fe fd2d 	bl	8003938 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <prvInitialiseTaskLists+0x78>)
 8004ee0:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <prvInitialiseTaskLists+0x64>)
 8004ee2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <prvInitialiseTaskLists+0x7c>)
 8004ee6:	4a05      	ldr	r2, [pc, #20]	; (8004efc <prvInitialiseTaskLists+0x68>)
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000100 	.word	0x20000100
 8004ef8:	20000164 	.word	0x20000164
 8004efc:	20000178 	.word	0x20000178
 8004f00:	20000194 	.word	0x20000194
 8004f04:	200001a8 	.word	0x200001a8
 8004f08:	200001c0 	.word	0x200001c0
 8004f0c:	2000018c 	.word	0x2000018c
 8004f10:	20000190 	.word	0x20000190

08004f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f1a:	e019      	b.n	8004f50 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004f1c:	f000 fd88 	bl	8005a30 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <prvCheckTasksWaitingTermination+0x4c>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fd8d 	bl	8003a4c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <prvCheckTasksWaitingTermination+0x50>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <prvCheckTasksWaitingTermination+0x50>)
 8004f3a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <prvCheckTasksWaitingTermination+0x54>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <prvCheckTasksWaitingTermination+0x54>)
 8004f44:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004f46:	f000 fda1 	bl	8005a8c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f80e 	bl	8004f6c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <prvCheckTasksWaitingTermination+0x54>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e1      	bne.n	8004f1c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200001a8 	.word	0x200001a8
 8004f64:	200001d4 	.word	0x200001d4
 8004f68:	200001bc 	.word	0x200001bc

08004f6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 febf 	bl	8005cfc <vPortFree>
                vPortFree( pxTCB );
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 febc 	bl	8005cfc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <prvResetNextTaskUnblockTime+0x30>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004f9a:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <prvResetNextTaskUnblockTime+0x34>)
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004fa2:	e005      	b.n	8004fb0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <prvResetNextTaskUnblockTime+0x30>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <prvResetNextTaskUnblockTime+0x34>)
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	2000018c 	.word	0x2000018c
 8004fc0:	200001f4 	.word	0x200001f4

08004fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <xTaskGetSchedulerState+0x34>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e008      	b.n	8004fea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <xTaskGetSchedulerState+0x38>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	e001      	b.n	8004fea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004fea:	687b      	ldr	r3, [r7, #4]
    }
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	200001e0 	.word	0x200001e0
 8004ffc:	200001fc 	.word	0x200001fc

08005000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d061      	beq.n	80050da <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005016:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <xTaskPriorityDisinherit+0xe4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d009      	beq.n	8005034 <xTaskPriorityDisinherit+0x34>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	e7fe      	b.n	8005032 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <xTaskPriorityDisinherit+0x50>
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	e7fe      	b.n	800504e <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005054:	1e5a      	subs	r2, r3, #1
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005062:	429a      	cmp	r2, r3
 8005064:	d039      	beq.n	80050da <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d135      	bne.n	80050da <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fcea 	bl	8003a4c <uxListRemove>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	2201      	movs	r2, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43da      	mvns	r2, r3
 800508a:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <xTaskPriorityDisinherit+0xe8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4013      	ands	r3, r2
 8005090:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <xTaskPriorityDisinherit+0xe8>)
 8005092:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	f1c3 0205 	rsb	r2, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	2201      	movs	r2, #1
 80050ae:	409a      	lsls	r2, r3
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <xTaskPriorityDisinherit+0xe8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	4a0c      	ldr	r2, [pc, #48]	; (80050e8 <xTaskPriorityDisinherit+0xe8>)
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <xTaskPriorityDisinherit+0xec>)
 80050c8:	441a      	add	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe fc5e 	bl	8003992 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80050d6:	2301      	movs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80050da:	697b      	ldr	r3, [r7, #20]
    }
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200000fc 	.word	0x200000fc
 80050e8:	200001dc 	.word	0x200001dc
 80050ec:	20000100 	.word	0x20000100

080050f0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80050fa:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3304      	adds	r3, #4
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fca0 	bl	8003a4c <uxListRemove>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	2201      	movs	r2, #1
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4013      	ands	r3, r2
 8005126:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005128:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d10a      	bne.n	8005148 <prvAddCurrentTaskToDelayedList+0x58>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005138:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	481a      	ldr	r0, [pc, #104]	; (80051ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005142:	f7fe fc26 	bl	8003992 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005146:	e026      	b.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	429a      	cmp	r2, r3
 800515e:	d209      	bcs.n	8005174 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f7fe fc34 	bl	80039da <vListInsert>
}
 8005172:	e010      	b.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe fc2a 	bl	80039da <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d202      	bcs.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005190:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6013      	str	r3, [r2, #0]
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	200001d8 	.word	0x200001d8
 80051a4:	200000fc 	.word	0x200000fc
 80051a8:	200001dc 	.word	0x200001dc
 80051ac:	200001c0 	.word	0x200001c0
 80051b0:	20000190 	.word	0x20000190
 80051b4:	2000018c 	.word	0x2000018c
 80051b8:	200001f4 	.word	0x200001f4

080051bc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80051c6:	f000 fad1 	bl	800576c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80051ca:	4b11      	ldr	r3, [pc, #68]	; (8005210 <xTimerCreateTimerTask+0x54>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <xTimerCreateTimerTask+0x58>)
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	2302      	movs	r3, #2
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051e0:	490d      	ldr	r1, [pc, #52]	; (8005218 <xTimerCreateTimerTask+0x5c>)
 80051e2:	480e      	ldr	r0, [pc, #56]	; (800521c <xTimerCreateTimerTask+0x60>)
 80051e4:	f7ff f91e 	bl	8004424 <xTaskCreate>
 80051e8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <xTimerCreateTimerTask+0x48>
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	e7fe      	b.n	8005202 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005204:	687b      	ldr	r3, [r7, #4]
    }
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000230 	.word	0x20000230
 8005214:	20000234 	.word	0x20000234
 8005218:	08006620 	.word	0x08006620
 800521c:	08005351 	.word	0x08005351

08005220 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	; 0x28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <xTimerGenericCommand+0x2c>
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	e7fe      	b.n	800524a <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <xTimerGenericCommand+0x94>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02a      	beq.n	80052aa <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b05      	cmp	r3, #5
 8005264:	dc18      	bgt.n	8005298 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005266:	f7ff fead 	bl	8004fc4 <xTaskGetSchedulerState>
 800526a:	4603      	mov	r3, r0
 800526c:	2b02      	cmp	r3, #2
 800526e:	d109      	bne.n	8005284 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005270:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <xTimerGenericCommand+0x94>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	f107 0114 	add.w	r1, r7, #20
 8005278:	2300      	movs	r3, #0
 800527a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527c:	f7fe fcea 	bl	8003c54 <xQueueGenericSend>
 8005280:	6278      	str	r0, [r7, #36]	; 0x24
 8005282:	e012      	b.n	80052aa <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <xTimerGenericCommand+0x94>)
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	f107 0114 	add.w	r1, r7, #20
 800528c:	2300      	movs	r3, #0
 800528e:	2200      	movs	r2, #0
 8005290:	f7fe fce0 	bl	8003c54 <xQueueGenericSend>
 8005294:	6278      	str	r0, [r7, #36]	; 0x24
 8005296:	e008      	b.n	80052aa <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <xTimerGenericCommand+0x94>)
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	f107 0114 	add.w	r1, r7, #20
 80052a0:	2300      	movs	r3, #0
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	f7fe fdd0 	bl	8003e48 <xQueueGenericSendFromISR>
 80052a8:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	; 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20000230 	.word	0x20000230

080052b8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c2:	4b22      	ldr	r3, [pc, #136]	; (800534c <prvProcessExpiredTimer+0x94>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe fbbb 	bl	8003a4c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d021      	beq.n	8005328 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	18d1      	adds	r1, r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	6978      	ldr	r0, [r7, #20]
 80052f2:	f000 f8d1 	bl	8005498 <prvInsertTimerInActiveList>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01e      	beq.n	800533a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052fc:	2300      	movs	r3, #0
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2300      	movs	r3, #0
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	2100      	movs	r1, #0
 8005306:	6978      	ldr	r0, [r7, #20]
 8005308:	f7ff ff8a 	bl	8005220 <xTimerGenericCommand>
 800530c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d112      	bne.n	800533a <prvProcessExpiredTimer+0x82>
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e7fe      	b.n	8005326 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	b2da      	uxtb	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	6978      	ldr	r0, [r7, #20]
 8005340:	4798      	blx	r3
    }
 8005342:	bf00      	nop
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000228 	.word	0x20000228

08005350 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005358:	f107 0308 	add.w	r3, r7, #8
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f857 	bl	8005410 <prvGetNextExpireTime>
 8005362:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4619      	mov	r1, r3
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f803 	bl	8005374 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800536e:	f000 f8d5 	bl	800551c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005372:	e7f1      	b.n	8005358 <prvTimerTask+0x8>

08005374 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800537e:	f7ff fa5f 	bl	8004840 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005382:	f107 0308 	add.w	r3, r7, #8
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f866 	bl	8005458 <prvSampleTimeNow>
 800538c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d130      	bne.n	80053f6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <prvProcessTimerOrBlockTask+0x3c>
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d806      	bhi.n	80053b0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80053a2:	f7ff fa5b 	bl	800485c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ff85 	bl	80052b8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80053ae:	e024      	b.n	80053fa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <prvProcessTimerOrBlockTask+0x90>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <prvProcessTimerOrBlockTask+0x50>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <prvProcessTimerOrBlockTask+0x52>
 80053c4:	2300      	movs	r3, #0
 80053c6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <prvProcessTimerOrBlockTask+0x94>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	4619      	mov	r1, r3
 80053d6:	f7fe fff1 	bl	80043bc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80053da:	f7ff fa3f 	bl	800485c <xTaskResumeAll>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <prvProcessTimerOrBlockTask+0x98>)
 80053e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	f3bf 8f6f 	isb	sy
    }
 80053f4:	e001      	b.n	80053fa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80053f6:	f7ff fa31 	bl	800485c <xTaskResumeAll>
    }
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	2000022c 	.word	0x2000022c
 8005408:	20000230 	.word	0x20000230
 800540c:	e000ed04 	.word	0xe000ed04

08005410 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <prvGetNextExpireTime+0x44>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <prvGetNextExpireTime+0x16>
 8005422:	2201      	movs	r2, #1
 8005424:	e000      	b.n	8005428 <prvGetNextExpireTime+0x18>
 8005426:	2200      	movs	r2, #0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <prvGetNextExpireTime+0x44>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e001      	b.n	8005444 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005444:	68fb      	ldr	r3, [r7, #12]
    }
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000228 	.word	0x20000228

08005458 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005460:	f7ff fa98 	bl	8004994 <xTaskGetTickCount>
 8005464:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <prvSampleTimeNow+0x3c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	429a      	cmp	r2, r3
 800546e:	d205      	bcs.n	800547c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005470:	f000 f918 	bl	80056a4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e002      	b.n	8005482 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005482:	4a04      	ldr	r2, [pc, #16]	; (8005494 <prvSampleTimeNow+0x3c>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005488:	68fb      	ldr	r3, [r7, #12]
    }
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000238 	.word	0x20000238

08005498 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d812      	bhi.n	80054e4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d302      	bcc.n	80054d2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e01b      	b.n	800550a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054d2:	4b10      	ldr	r3, [pc, #64]	; (8005514 <prvInsertTimerInActiveList+0x7c>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3304      	adds	r3, #4
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f7fe fa7c 	bl	80039da <vListInsert>
 80054e2:	e012      	b.n	800550a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d206      	bcs.n	80054fa <prvInsertTimerInActiveList+0x62>
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e007      	b.n	800550a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <prvInsertTimerInActiveList+0x80>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3304      	adds	r3, #4
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f7fe fa68 	bl	80039da <vListInsert>
            }
        }

        return xProcessTimerNow;
 800550a:	697b      	ldr	r3, [r7, #20]
    }
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	2000022c 	.word	0x2000022c
 8005518:	20000228 	.word	0x20000228

0800551c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800551c:	b580      	push	{r7, lr}
 800551e:	b08c      	sub	sp, #48	; 0x30
 8005520:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005522:	e0ac      	b.n	800567e <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f2c0 80a8 	blt.w	800567c <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	3304      	adds	r3, #4
 800553c:	4618      	mov	r0, r3
 800553e:	f7fe fa85 	bl	8003a4c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff ff87 	bl	8005458 <prvSampleTimeNow>
 800554a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b09      	cmp	r3, #9
 8005550:	f200 8095 	bhi.w	800567e <prvProcessReceivedCommands+0x162>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <prvProcessReceivedCommands+0x40>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005585 	.word	0x08005585
 8005560:	08005585 	.word	0x08005585
 8005564:	08005585 	.word	0x08005585
 8005568:	080055f7 	.word	0x080055f7
 800556c:	0800560b 	.word	0x0800560b
 8005570:	08005653 	.word	0x08005653
 8005574:	08005585 	.word	0x08005585
 8005578:	08005585 	.word	0x08005585
 800557c:	080055f7 	.word	0x080055f7
 8005580:	0800560b 	.word	0x0800560b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	18d1      	adds	r1, r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a3a      	ldr	r2, [r7, #32]
 80055a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055a4:	f7ff ff78 	bl	8005498 <prvInsertTimerInActiveList>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d067      	beq.n	800567e <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055b4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05c      	beq.n	800567e <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	441a      	add	r2, r3
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2300      	movs	r3, #0
 80055d2:	2100      	movs	r1, #0
 80055d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055d6:	f7ff fe23 	bl	8005220 <xTimerGenericCommand>
 80055da:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d14d      	bne.n	800567e <prvProcessReceivedCommands+0x162>
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e7fe      	b.n	80055f4 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005608:	e039      	b.n	800567e <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <prvProcessReceivedCommands+0x122>
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e7fe      	b.n	800563c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	18d1      	adds	r1, r2, r3
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	6a3a      	ldr	r2, [r7, #32]
 800564a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800564c:	f7ff ff24 	bl	8005498 <prvInsertTimerInActiveList>
                        break;
 8005650:	e015      	b.n	800567e <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d103      	bne.n	8005668 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8005660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005662:	f000 fb4b 	bl	8005cfc <vPortFree>
 8005666:	e00a      	b.n	800567e <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	b2da      	uxtb	r2, r3
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800567a:	e000      	b.n	800567e <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800567c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800567e:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <prvProcessReceivedCommands+0x184>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f107 0108 	add.w	r1, r7, #8
 8005686:	2200      	movs	r2, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f7fe fc83 	bl	8003f94 <xQueueReceive>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f af47 	bne.w	8005524 <prvProcessReceivedCommands+0x8>
        }
    }
 8005696:	bf00      	nop
 8005698:	3728      	adds	r7, #40	; 0x28
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000230 	.word	0x20000230

080056a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056aa:	e047      	b.n	800573c <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056ac:	4b2d      	ldr	r3, [pc, #180]	; (8005764 <prvSwitchTimerLists+0xc0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b6:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <prvSwitchTimerLists+0xc0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe f9c1 	bl	8003a4c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d02d      	beq.n	800573c <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d90e      	bls.n	8005710 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056fe:	4b19      	ldr	r3, [pc, #100]	; (8005764 <prvSwitchTimerLists+0xc0>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7fe f966 	bl	80039da <vListInsert>
 800570e:	e015      	b.n	800573c <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	2100      	movs	r1, #0
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fd80 	bl	8005220 <xTimerGenericCommand>
 8005720:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <prvSwitchTimerLists+0x98>
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	e7fe      	b.n	800573a <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <prvSwitchTimerLists+0xc0>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1b2      	bne.n	80056ac <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <prvSwitchTimerLists+0xc0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <prvSwitchTimerLists+0xc4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <prvSwitchTimerLists+0xc0>)
 8005752:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <prvSwitchTimerLists+0xc4>)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	6013      	str	r3, [r2, #0]
    }
 800575a:	bf00      	nop
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000228 	.word	0x20000228
 8005768:	2000022c 	.word	0x2000022c

0800576c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005770:	f000 f95e 	bl	8005a30 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <prvCheckForValidListAndQueue+0x54>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d11d      	bne.n	80057b8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800577c:	4811      	ldr	r0, [pc, #68]	; (80057c4 <prvCheckForValidListAndQueue+0x58>)
 800577e:	f7fe f8db 	bl	8003938 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005782:	4811      	ldr	r0, [pc, #68]	; (80057c8 <prvCheckForValidListAndQueue+0x5c>)
 8005784:	f7fe f8d8 	bl	8003938 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005788:	4b10      	ldr	r3, [pc, #64]	; (80057cc <prvCheckForValidListAndQueue+0x60>)
 800578a:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <prvCheckForValidListAndQueue+0x58>)
 800578c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800578e:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <prvCheckForValidListAndQueue+0x64>)
 8005790:	4a0d      	ldr	r2, [pc, #52]	; (80057c8 <prvCheckForValidListAndQueue+0x5c>)
 8005792:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005794:	2200      	movs	r2, #0
 8005796:	210c      	movs	r1, #12
 8005798:	200a      	movs	r0, #10
 800579a:	f7fe f9e9 	bl	8003b70 <xQueueGenericCreate>
 800579e:	4602      	mov	r2, r0
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <prvCheckForValidListAndQueue+0x54>)
 80057a2:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <prvCheckForValidListAndQueue+0x54>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <prvCheckForValidListAndQueue+0x54>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4908      	ldr	r1, [pc, #32]	; (80057d4 <prvCheckForValidListAndQueue+0x68>)
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fdda 	bl	800436c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80057b8:	f000 f968 	bl	8005a8c <vPortExitCritical>
    }
 80057bc:	bf00      	nop
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000230 	.word	0x20000230
 80057c4:	20000200 	.word	0x20000200
 80057c8:	20000214 	.word	0x20000214
 80057cc:	20000228 	.word	0x20000228
 80057d0:	2000022c 	.word	0x2000022c
 80057d4:	08006628 	.word	0x08006628

080057d8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3b04      	subs	r3, #4
 80057e8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b04      	subs	r3, #4
 80057f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f023 0201 	bic.w	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3b04      	subs	r3, #4
 8005806:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005808:	4a0c      	ldr	r2, [pc, #48]	; (800583c <pxPortInitialiseStack+0x64>)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3b14      	subs	r3, #20
 8005812:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3b04      	subs	r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f06f 0202 	mvn.w	r2, #2
 8005826:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3b20      	subs	r3, #32
 800582c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	08005841 	.word	0x08005841

08005840 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <prvTaskExitError+0x50>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d009      	beq.n	8005868 <prvTaskExitError+0x28>
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e7fe      	b.n	8005866 <prvTaskExitError+0x26>
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800587a:	bf00      	nop
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0fc      	beq.n	800587c <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	2000000c 	.word	0x2000000c
	...

080058a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <pxCurrentTCBConst2>)
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	6808      	ldr	r0, [r1, #0]
 80058a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058aa:	f380 8809 	msr	PSP, r0
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8811 	msr	BASEPRI, r0
 80058ba:	4770      	bx	lr
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst2>:
 80058c0:	200000fc 	.word	0x200000fc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80058c8:	4808      	ldr	r0, [pc, #32]	; (80058ec <prvPortStartFirstTask+0x24>)
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	6800      	ldr	r0, [r0, #0]
 80058ce:	f380 8808 	msr	MSP, r0
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f380 8814 	msr	CONTROL, r0
 80058da:	b662      	cpsie	i
 80058dc:	b661      	cpsie	f
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	df00      	svc	0
 80058e8:	bf00      	nop
 80058ea:	0000      	.short	0x0000
 80058ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop

080058f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058fa:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <xPortStartScheduler+0x118>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a44      	ldr	r2, [pc, #272]	; (8005a10 <xPortStartScheduler+0x11c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d109      	bne.n	8005918 <xPortStartScheduler+0x24>
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	e7fe      	b.n	8005916 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005918:	4b3c      	ldr	r3, [pc, #240]	; (8005a0c <xPortStartScheduler+0x118>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a3d      	ldr	r2, [pc, #244]	; (8005a14 <xPortStartScheduler+0x120>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d109      	bne.n	8005936 <xPortStartScheduler+0x42>
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e7fe      	b.n	8005934 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005936:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <xPortStartScheduler+0x124>)
 8005938:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	22ff      	movs	r2, #255	; 0xff
 8005946:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005958:	b2da      	uxtb	r2, r3
 800595a:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <xPortStartScheduler+0x128>)
 800595c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800595e:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <xPortStartScheduler+0x12c>)
 8005960:	2207      	movs	r2, #7
 8005962:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005964:	e009      	b.n	800597a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005966:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <xPortStartScheduler+0x12c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3b01      	subs	r3, #1
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <xPortStartScheduler+0x12c>)
 800596e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b80      	cmp	r3, #128	; 0x80
 8005984:	d0ef      	beq.n	8005966 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <xPortStartScheduler+0x12c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1c3 0307 	rsb	r3, r3, #7
 800598e:	2b04      	cmp	r3, #4
 8005990:	d009      	beq.n	80059a6 <xPortStartScheduler+0xb2>
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	e7fe      	b.n	80059a4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059a6:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <xPortStartScheduler+0x12c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <xPortStartScheduler+0x12c>)
 80059ae:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059b0:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <xPortStartScheduler+0x12c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059b8:	4a19      	ldr	r2, [pc, #100]	; (8005a20 <xPortStartScheduler+0x12c>)
 80059ba:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80059c4:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <xPortStartScheduler+0x130>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <xPortStartScheduler+0x130>)
 80059ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059ce:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80059d0:	4b14      	ldr	r3, [pc, #80]	; (8005a24 <xPortStartScheduler+0x130>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <xPortStartScheduler+0x130>)
 80059d6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059da:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80059dc:	f000 f8d4 	bl	8005b88 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80059e0:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <xPortStartScheduler+0x134>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80059e6:	f000 f8f3 	bl	8005bd0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059ea:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <xPortStartScheduler+0x138>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a0f      	ldr	r2, [pc, #60]	; (8005a2c <xPortStartScheduler+0x138>)
 80059f0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059f4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80059f6:	f7ff ff67 	bl	80058c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80059fa:	f7ff f893 	bl	8004b24 <vTaskSwitchContext>
    prvTaskExitError();
 80059fe:	f7ff ff1f 	bl	8005840 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	e000ed00 	.word	0xe000ed00
 8005a10:	410fc271 	.word	0x410fc271
 8005a14:	410fc270 	.word	0x410fc270
 8005a18:	e000e400 	.word	0xe000e400
 8005a1c:	2000023c 	.word	0x2000023c
 8005a20:	20000240 	.word	0x20000240
 8005a24:	e000ed20 	.word	0xe000ed20
 8005a28:	2000000c 	.word	0x2000000c
 8005a2c:	e000ef34 	.word	0xe000ef34

08005a30 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005a48:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <vPortEnterCritical+0x54>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <vPortEnterCritical+0x54>)
 8005a50:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005a52:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <vPortEnterCritical+0x54>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d10e      	bne.n	8005a78 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <vPortEnterCritical+0x58>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d009      	beq.n	8005a78 <vPortEnterCritical+0x48>
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	e7fe      	b.n	8005a76 <vPortEnterCritical+0x46>
    }
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	2000000c 	.word	0x2000000c
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005a92:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <vPortExitCritical+0x4c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <vPortExitCritical+0x22>
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	e7fe      	b.n	8005aac <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <vPortExitCritical+0x4c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <vPortExitCritical+0x4c>)
 8005ab6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <vPortExitCritical+0x4c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <vPortExitCritical+0x3e>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	2000000c 	.word	0x2000000c
 8005adc:	00000000 	.word	0x00000000

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7ff f808 	bl	8004b24 <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	200000fc 	.word	0x200000fc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005b60:	f7fe ff28 	bl	80049b4 <xTaskIncrementTick>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <SysTick_Handler+0x3c>)
 8005b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	2300      	movs	r3, #0
 8005b74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <vPortSetupTimerInterrupt+0x34>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b92:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <vPortSetupTimerInterrupt+0x38>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <vPortSetupTimerInterrupt+0x3c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <vPortSetupTimerInterrupt+0x40>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <vPortSetupTimerInterrupt+0x44>)
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <vPortSetupTimerInterrupt+0x34>)
 8005bac:	2207      	movs	r2, #7
 8005bae:	601a      	str	r2, [r3, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	e000e010 	.word	0xe000e010
 8005bc0:	e000e018 	.word	0xe000e018
 8005bc4:	20000000 	.word	0x20000000
 8005bc8:	10624dd3 	.word	0x10624dd3
 8005bcc:	e000e014 	.word	0xe000e014

08005bd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005bd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005be0 <vPortEnableVFP+0x10>
 8005bd4:	6801      	ldr	r1, [r0, #0]
 8005bd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bda:	6001      	str	r1, [r0, #0]
 8005bdc:	4770      	bx	lr
 8005bde:	0000      	.short	0x0000
 8005be0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop

08005be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d913      	bls.n	8005c22 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfa:	4a16      	ldr	r2, [pc, #88]	; (8005c54 <vPortValidateInterruptPriority+0x6c>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c04:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <vPortValidateInterruptPriority+0x70>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d209      	bcs.n	8005c22 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	e7fe      	b.n	8005c20 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c22:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <vPortValidateInterruptPriority+0x74>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <vPortValidateInterruptPriority+0x78>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d909      	bls.n	8005c46 <vPortValidateInterruptPriority+0x5e>
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	e7fe      	b.n	8005c44 <vPortValidateInterruptPriority+0x5c>
    }
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	e000e3f0 	.word	0xe000e3f0
 8005c58:	2000023c 	.word	0x2000023c
 8005c5c:	e000ed0c 	.word	0xe000ed0c
 8005c60:	20000240 	.word	0x20000240

08005c64 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned to the required number of bytes. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <pvPortMalloc+0x20>
            {
                /* Byte alignment required. */
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	3308      	adds	r3, #8
 8005c82:	607b      	str	r3, [r7, #4]
            }
        }
    #endif

    vTaskSuspendAll();
 8005c84:	f7fe fddc 	bl	8004840 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8005c88:	4b18      	ldr	r3, [pc, #96]	; (8005cec <pvPortMalloc+0x88>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <pvPortMalloc+0x38>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8005c90:	4b17      	ldr	r3, [pc, #92]	; (8005cf0 <pvPortMalloc+0x8c>)
 8005c92:	f023 0307 	bic.w	r3, r3, #7
 8005c96:	461a      	mov	r2, r3
 8005c98:	4b14      	ldr	r3, [pc, #80]	; (8005cec <pvPortMalloc+0x88>)
 8005c9a:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation. */
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8005c9c:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <pvPortMalloc+0x90>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <pvPortMalloc+0x94>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d813      	bhi.n	8005cd2 <pvPortMalloc+0x6e>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <pvPortMalloc+0x90>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	441a      	add	r2, r3
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <pvPortMalloc+0x90>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d90b      	bls.n	8005cd2 <pvPortMalloc+0x6e>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <pvPortMalloc+0x88>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <pvPortMalloc+0x90>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <pvPortMalloc+0x90>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <pvPortMalloc+0x90>)
 8005cd0:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005cd2:	f7fe fdc3 	bl	800485c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <pvPortMalloc+0x7c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8005cdc:	f7fb fe4c 	bl	8001978 <vApplicationMallocFailedHook>
            }
        }
    #endif

    return pvReturn;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20012e48 	.word	0x20012e48
 8005cf0:	2000024c 	.word	0x2000024c
 8005cf4:	20012e44 	.word	0x20012e44
 8005cf8:	00012bf7 	.word	0x00012bf7

08005cfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <vPortFree+0x22>
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e7fe      	b.n	8005d1c <vPortFree+0x20>
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <__errno>:
 8005d2c:	4b01      	ldr	r3, [pc, #4]	; (8005d34 <__errno+0x8>)
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20000010 	.word	0x20000010

08005d38 <__libc_init_array>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	4e0d      	ldr	r6, [pc, #52]	; (8005d70 <__libc_init_array+0x38>)
 8005d3c:	4c0d      	ldr	r4, [pc, #52]	; (8005d74 <__libc_init_array+0x3c>)
 8005d3e:	1ba4      	subs	r4, r4, r6
 8005d40:	10a4      	asrs	r4, r4, #2
 8005d42:	2500      	movs	r5, #0
 8005d44:	42a5      	cmp	r5, r4
 8005d46:	d109      	bne.n	8005d5c <__libc_init_array+0x24>
 8005d48:	4e0b      	ldr	r6, [pc, #44]	; (8005d78 <__libc_init_array+0x40>)
 8005d4a:	4c0c      	ldr	r4, [pc, #48]	; (8005d7c <__libc_init_array+0x44>)
 8005d4c:	f000 fc3c 	bl	80065c8 <_init>
 8005d50:	1ba4      	subs	r4, r4, r6
 8005d52:	10a4      	asrs	r4, r4, #2
 8005d54:	2500      	movs	r5, #0
 8005d56:	42a5      	cmp	r5, r4
 8005d58:	d105      	bne.n	8005d66 <__libc_init_array+0x2e>
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
 8005d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d60:	4798      	blx	r3
 8005d62:	3501      	adds	r5, #1
 8005d64:	e7ee      	b.n	8005d44 <__libc_init_array+0xc>
 8005d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d6a:	4798      	blx	r3
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7f2      	b.n	8005d56 <__libc_init_array+0x1e>
 8005d70:	08006684 	.word	0x08006684
 8005d74:	08006684 	.word	0x08006684
 8005d78:	08006684 	.word	0x08006684
 8005d7c:	08006688 	.word	0x08006688

08005d80 <memcpy>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	1e43      	subs	r3, r0, #1
 8005d84:	440a      	add	r2, r1
 8005d86:	4291      	cmp	r1, r2
 8005d88:	d100      	bne.n	8005d8c <memcpy+0xc>
 8005d8a:	bd10      	pop	{r4, pc}
 8005d8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d94:	e7f7      	b.n	8005d86 <memcpy+0x6>

08005d96 <memset>:
 8005d96:	4402      	add	r2, r0
 8005d98:	4603      	mov	r3, r0
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d100      	bne.n	8005da0 <memset+0xa>
 8005d9e:	4770      	bx	lr
 8005da0:	f803 1b01 	strb.w	r1, [r3], #1
 8005da4:	e7f9      	b.n	8005d9a <memset+0x4>
	...

08005da8 <sniprintf>:
 8005da8:	b40c      	push	{r2, r3}
 8005daa:	b530      	push	{r4, r5, lr}
 8005dac:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <sniprintf+0x64>)
 8005dae:	1e0c      	subs	r4, r1, #0
 8005db0:	b09d      	sub	sp, #116	; 0x74
 8005db2:	681d      	ldr	r5, [r3, #0]
 8005db4:	da08      	bge.n	8005dc8 <sniprintf+0x20>
 8005db6:	238b      	movs	r3, #139	; 0x8b
 8005db8:	602b      	str	r3, [r5, #0]
 8005dba:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbe:	b01d      	add	sp, #116	; 0x74
 8005dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dc4:	b002      	add	sp, #8
 8005dc6:	4770      	bx	lr
 8005dc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005dcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dd0:	bf14      	ite	ne
 8005dd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005dd6:	4623      	moveq	r3, r4
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	9307      	str	r3, [sp, #28]
 8005ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005de0:	9002      	str	r0, [sp, #8]
 8005de2:	9006      	str	r0, [sp, #24]
 8005de4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005de8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dea:	ab21      	add	r3, sp, #132	; 0x84
 8005dec:	a902      	add	r1, sp, #8
 8005dee:	4628      	mov	r0, r5
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f000 f867 	bl	8005ec4 <_svfiprintf_r>
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	bfbc      	itt	lt
 8005dfa:	238b      	movlt	r3, #139	; 0x8b
 8005dfc:	602b      	strlt	r3, [r5, #0]
 8005dfe:	2c00      	cmp	r4, #0
 8005e00:	d0dd      	beq.n	8005dbe <sniprintf+0x16>
 8005e02:	9b02      	ldr	r3, [sp, #8]
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e7d9      	b.n	8005dbe <sniprintf+0x16>
 8005e0a:	bf00      	nop
 8005e0c:	20000010 	.word	0x20000010

08005e10 <__ssputs_r>:
 8005e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	688e      	ldr	r6, [r1, #8]
 8005e16:	429e      	cmp	r6, r3
 8005e18:	4682      	mov	sl, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	4690      	mov	r8, r2
 8005e1e:	4699      	mov	r9, r3
 8005e20:	d837      	bhi.n	8005e92 <__ssputs_r+0x82>
 8005e22:	898a      	ldrh	r2, [r1, #12]
 8005e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e28:	d031      	beq.n	8005e8e <__ssputs_r+0x7e>
 8005e2a:	6825      	ldr	r5, [r4, #0]
 8005e2c:	6909      	ldr	r1, [r1, #16]
 8005e2e:	1a6f      	subs	r7, r5, r1
 8005e30:	6965      	ldr	r5, [r4, #20]
 8005e32:	2302      	movs	r3, #2
 8005e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e38:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e3c:	f109 0301 	add.w	r3, r9, #1
 8005e40:	443b      	add	r3, r7
 8005e42:	429d      	cmp	r5, r3
 8005e44:	bf38      	it	cc
 8005e46:	461d      	movcc	r5, r3
 8005e48:	0553      	lsls	r3, r2, #21
 8005e4a:	d530      	bpl.n	8005eae <__ssputs_r+0x9e>
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	f000 fb21 	bl	8006494 <_malloc_r>
 8005e52:	4606      	mov	r6, r0
 8005e54:	b950      	cbnz	r0, 8005e6c <__ssputs_r+0x5c>
 8005e56:	230c      	movs	r3, #12
 8005e58:	f8ca 3000 	str.w	r3, [sl]
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6c:	463a      	mov	r2, r7
 8005e6e:	6921      	ldr	r1, [r4, #16]
 8005e70:	f7ff ff86 	bl	8005d80 <memcpy>
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7e:	81a3      	strh	r3, [r4, #12]
 8005e80:	6126      	str	r6, [r4, #16]
 8005e82:	6165      	str	r5, [r4, #20]
 8005e84:	443e      	add	r6, r7
 8005e86:	1bed      	subs	r5, r5, r7
 8005e88:	6026      	str	r6, [r4, #0]
 8005e8a:	60a5      	str	r5, [r4, #8]
 8005e8c:	464e      	mov	r6, r9
 8005e8e:	454e      	cmp	r6, r9
 8005e90:	d900      	bls.n	8005e94 <__ssputs_r+0x84>
 8005e92:	464e      	mov	r6, r9
 8005e94:	4632      	mov	r2, r6
 8005e96:	4641      	mov	r1, r8
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	f000 fa93 	bl	80063c4 <memmove>
 8005e9e:	68a3      	ldr	r3, [r4, #8]
 8005ea0:	1b9b      	subs	r3, r3, r6
 8005ea2:	60a3      	str	r3, [r4, #8]
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	441e      	add	r6, r3
 8005ea8:	6026      	str	r6, [r4, #0]
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e7dc      	b.n	8005e68 <__ssputs_r+0x58>
 8005eae:	462a      	mov	r2, r5
 8005eb0:	f000 fb4a 	bl	8006548 <_realloc_r>
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d1e2      	bne.n	8005e80 <__ssputs_r+0x70>
 8005eba:	6921      	ldr	r1, [r4, #16]
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	f000 fa9b 	bl	80063f8 <_free_r>
 8005ec2:	e7c8      	b.n	8005e56 <__ssputs_r+0x46>

08005ec4 <_svfiprintf_r>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	461d      	mov	r5, r3
 8005eca:	898b      	ldrh	r3, [r1, #12]
 8005ecc:	061f      	lsls	r7, r3, #24
 8005ece:	b09d      	sub	sp, #116	; 0x74
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	d50f      	bpl.n	8005ef8 <_svfiprintf_r+0x34>
 8005ed8:	690b      	ldr	r3, [r1, #16]
 8005eda:	b96b      	cbnz	r3, 8005ef8 <_svfiprintf_r+0x34>
 8005edc:	2140      	movs	r1, #64	; 0x40
 8005ede:	f000 fad9 	bl	8006494 <_malloc_r>
 8005ee2:	6020      	str	r0, [r4, #0]
 8005ee4:	6120      	str	r0, [r4, #16]
 8005ee6:	b928      	cbnz	r0, 8005ef4 <_svfiprintf_r+0x30>
 8005ee8:	230c      	movs	r3, #12
 8005eea:	f8c8 3000 	str.w	r3, [r8]
 8005eee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef2:	e0c8      	b.n	8006086 <_svfiprintf_r+0x1c2>
 8005ef4:	2340      	movs	r3, #64	; 0x40
 8005ef6:	6163      	str	r3, [r4, #20]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9309      	str	r3, [sp, #36]	; 0x24
 8005efc:	2320      	movs	r3, #32
 8005efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f02:	2330      	movs	r3, #48	; 0x30
 8005f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f08:	9503      	str	r5, [sp, #12]
 8005f0a:	f04f 0b01 	mov.w	fp, #1
 8005f0e:	4637      	mov	r7, r6
 8005f10:	463d      	mov	r5, r7
 8005f12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f16:	b10b      	cbz	r3, 8005f1c <_svfiprintf_r+0x58>
 8005f18:	2b25      	cmp	r3, #37	; 0x25
 8005f1a:	d13e      	bne.n	8005f9a <_svfiprintf_r+0xd6>
 8005f1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f20:	d00b      	beq.n	8005f3a <_svfiprintf_r+0x76>
 8005f22:	4653      	mov	r3, sl
 8005f24:	4632      	mov	r2, r6
 8005f26:	4621      	mov	r1, r4
 8005f28:	4640      	mov	r0, r8
 8005f2a:	f7ff ff71 	bl	8005e10 <__ssputs_r>
 8005f2e:	3001      	adds	r0, #1
 8005f30:	f000 80a4 	beq.w	800607c <_svfiprintf_r+0x1b8>
 8005f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f36:	4453      	add	r3, sl
 8005f38:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3a:	783b      	ldrb	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 809d 	beq.w	800607c <_svfiprintf_r+0x1b8>
 8005f42:	2300      	movs	r3, #0
 8005f44:	f04f 32ff 	mov.w	r2, #4294967295
 8005f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f4c:	9304      	str	r3, [sp, #16]
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f54:	931a      	str	r3, [sp, #104]	; 0x68
 8005f56:	462f      	mov	r7, r5
 8005f58:	2205      	movs	r2, #5
 8005f5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005f5e:	4850      	ldr	r0, [pc, #320]	; (80060a0 <_svfiprintf_r+0x1dc>)
 8005f60:	f7fa f956 	bl	8000210 <memchr>
 8005f64:	9b04      	ldr	r3, [sp, #16]
 8005f66:	b9d0      	cbnz	r0, 8005f9e <_svfiprintf_r+0xda>
 8005f68:	06d9      	lsls	r1, r3, #27
 8005f6a:	bf44      	itt	mi
 8005f6c:	2220      	movmi	r2, #32
 8005f6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f72:	071a      	lsls	r2, r3, #28
 8005f74:	bf44      	itt	mi
 8005f76:	222b      	movmi	r2, #43	; 0x2b
 8005f78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f7c:	782a      	ldrb	r2, [r5, #0]
 8005f7e:	2a2a      	cmp	r2, #42	; 0x2a
 8005f80:	d015      	beq.n	8005fae <_svfiprintf_r+0xea>
 8005f82:	9a07      	ldr	r2, [sp, #28]
 8005f84:	462f      	mov	r7, r5
 8005f86:	2000      	movs	r0, #0
 8005f88:	250a      	movs	r5, #10
 8005f8a:	4639      	mov	r1, r7
 8005f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f90:	3b30      	subs	r3, #48	; 0x30
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d94d      	bls.n	8006032 <_svfiprintf_r+0x16e>
 8005f96:	b1b8      	cbz	r0, 8005fc8 <_svfiprintf_r+0x104>
 8005f98:	e00f      	b.n	8005fba <_svfiprintf_r+0xf6>
 8005f9a:	462f      	mov	r7, r5
 8005f9c:	e7b8      	b.n	8005f10 <_svfiprintf_r+0x4c>
 8005f9e:	4a40      	ldr	r2, [pc, #256]	; (80060a0 <_svfiprintf_r+0x1dc>)
 8005fa0:	1a80      	subs	r0, r0, r2
 8005fa2:	fa0b f000 	lsl.w	r0, fp, r0
 8005fa6:	4318      	orrs	r0, r3
 8005fa8:	9004      	str	r0, [sp, #16]
 8005faa:	463d      	mov	r5, r7
 8005fac:	e7d3      	b.n	8005f56 <_svfiprintf_r+0x92>
 8005fae:	9a03      	ldr	r2, [sp, #12]
 8005fb0:	1d11      	adds	r1, r2, #4
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	9103      	str	r1, [sp, #12]
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	db01      	blt.n	8005fbe <_svfiprintf_r+0xfa>
 8005fba:	9207      	str	r2, [sp, #28]
 8005fbc:	e004      	b.n	8005fc8 <_svfiprintf_r+0x104>
 8005fbe:	4252      	negs	r2, r2
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	9207      	str	r2, [sp, #28]
 8005fc6:	9304      	str	r3, [sp, #16]
 8005fc8:	783b      	ldrb	r3, [r7, #0]
 8005fca:	2b2e      	cmp	r3, #46	; 0x2e
 8005fcc:	d10c      	bne.n	8005fe8 <_svfiprintf_r+0x124>
 8005fce:	787b      	ldrb	r3, [r7, #1]
 8005fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd2:	d133      	bne.n	800603c <_svfiprintf_r+0x178>
 8005fd4:	9b03      	ldr	r3, [sp, #12]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	9203      	str	r2, [sp, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bfb8      	it	lt
 8005fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fe4:	3702      	adds	r7, #2
 8005fe6:	9305      	str	r3, [sp, #20]
 8005fe8:	4d2e      	ldr	r5, [pc, #184]	; (80060a4 <_svfiprintf_r+0x1e0>)
 8005fea:	7839      	ldrb	r1, [r7, #0]
 8005fec:	2203      	movs	r2, #3
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f7fa f90e 	bl	8000210 <memchr>
 8005ff4:	b138      	cbz	r0, 8006006 <_svfiprintf_r+0x142>
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	1b40      	subs	r0, r0, r5
 8005ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8005ffe:	9b04      	ldr	r3, [sp, #16]
 8006000:	4303      	orrs	r3, r0
 8006002:	3701      	adds	r7, #1
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	7839      	ldrb	r1, [r7, #0]
 8006008:	4827      	ldr	r0, [pc, #156]	; (80060a8 <_svfiprintf_r+0x1e4>)
 800600a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800600e:	2206      	movs	r2, #6
 8006010:	1c7e      	adds	r6, r7, #1
 8006012:	f7fa f8fd 	bl	8000210 <memchr>
 8006016:	2800      	cmp	r0, #0
 8006018:	d038      	beq.n	800608c <_svfiprintf_r+0x1c8>
 800601a:	4b24      	ldr	r3, [pc, #144]	; (80060ac <_svfiprintf_r+0x1e8>)
 800601c:	bb13      	cbnz	r3, 8006064 <_svfiprintf_r+0x1a0>
 800601e:	9b03      	ldr	r3, [sp, #12]
 8006020:	3307      	adds	r3, #7
 8006022:	f023 0307 	bic.w	r3, r3, #7
 8006026:	3308      	adds	r3, #8
 8006028:	9303      	str	r3, [sp, #12]
 800602a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602c:	444b      	add	r3, r9
 800602e:	9309      	str	r3, [sp, #36]	; 0x24
 8006030:	e76d      	b.n	8005f0e <_svfiprintf_r+0x4a>
 8006032:	fb05 3202 	mla	r2, r5, r2, r3
 8006036:	2001      	movs	r0, #1
 8006038:	460f      	mov	r7, r1
 800603a:	e7a6      	b.n	8005f8a <_svfiprintf_r+0xc6>
 800603c:	2300      	movs	r3, #0
 800603e:	3701      	adds	r7, #1
 8006040:	9305      	str	r3, [sp, #20]
 8006042:	4619      	mov	r1, r3
 8006044:	250a      	movs	r5, #10
 8006046:	4638      	mov	r0, r7
 8006048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800604c:	3a30      	subs	r2, #48	; 0x30
 800604e:	2a09      	cmp	r2, #9
 8006050:	d903      	bls.n	800605a <_svfiprintf_r+0x196>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0c8      	beq.n	8005fe8 <_svfiprintf_r+0x124>
 8006056:	9105      	str	r1, [sp, #20]
 8006058:	e7c6      	b.n	8005fe8 <_svfiprintf_r+0x124>
 800605a:	fb05 2101 	mla	r1, r5, r1, r2
 800605e:	2301      	movs	r3, #1
 8006060:	4607      	mov	r7, r0
 8006062:	e7f0      	b.n	8006046 <_svfiprintf_r+0x182>
 8006064:	ab03      	add	r3, sp, #12
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4622      	mov	r2, r4
 800606a:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <_svfiprintf_r+0x1ec>)
 800606c:	a904      	add	r1, sp, #16
 800606e:	4640      	mov	r0, r8
 8006070:	f3af 8000 	nop.w
 8006074:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006078:	4681      	mov	r9, r0
 800607a:	d1d6      	bne.n	800602a <_svfiprintf_r+0x166>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	065b      	lsls	r3, r3, #25
 8006080:	f53f af35 	bmi.w	8005eee <_svfiprintf_r+0x2a>
 8006084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006086:	b01d      	add	sp, #116	; 0x74
 8006088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608c:	ab03      	add	r3, sp, #12
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	4622      	mov	r2, r4
 8006092:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <_svfiprintf_r+0x1ec>)
 8006094:	a904      	add	r1, sp, #16
 8006096:	4640      	mov	r0, r8
 8006098:	f000 f882 	bl	80061a0 <_printf_i>
 800609c:	e7ea      	b.n	8006074 <_svfiprintf_r+0x1b0>
 800609e:	bf00      	nop
 80060a0:	08006648 	.word	0x08006648
 80060a4:	0800664e 	.word	0x0800664e
 80060a8:	08006652 	.word	0x08006652
 80060ac:	00000000 	.word	0x00000000
 80060b0:	08005e11 	.word	0x08005e11

080060b4 <_printf_common>:
 80060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	4691      	mov	r9, r2
 80060ba:	461f      	mov	r7, r3
 80060bc:	688a      	ldr	r2, [r1, #8]
 80060be:	690b      	ldr	r3, [r1, #16]
 80060c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	bfb8      	it	lt
 80060c8:	4613      	movlt	r3, r2
 80060ca:	f8c9 3000 	str.w	r3, [r9]
 80060ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060d2:	4606      	mov	r6, r0
 80060d4:	460c      	mov	r4, r1
 80060d6:	b112      	cbz	r2, 80060de <_printf_common+0x2a>
 80060d8:	3301      	adds	r3, #1
 80060da:	f8c9 3000 	str.w	r3, [r9]
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	0699      	lsls	r1, r3, #26
 80060e2:	bf42      	ittt	mi
 80060e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80060e8:	3302      	addmi	r3, #2
 80060ea:	f8c9 3000 	strmi.w	r3, [r9]
 80060ee:	6825      	ldr	r5, [r4, #0]
 80060f0:	f015 0506 	ands.w	r5, r5, #6
 80060f4:	d107      	bne.n	8006106 <_printf_common+0x52>
 80060f6:	f104 0a19 	add.w	sl, r4, #25
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	42ab      	cmp	r3, r5
 8006104:	dc28      	bgt.n	8006158 <_printf_common+0xa4>
 8006106:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	3300      	adds	r3, #0
 800610e:	bf18      	it	ne
 8006110:	2301      	movne	r3, #1
 8006112:	0692      	lsls	r2, r2, #26
 8006114:	d42d      	bmi.n	8006172 <_printf_common+0xbe>
 8006116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800611a:	4639      	mov	r1, r7
 800611c:	4630      	mov	r0, r6
 800611e:	47c0      	blx	r8
 8006120:	3001      	adds	r0, #1
 8006122:	d020      	beq.n	8006166 <_printf_common+0xb2>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	68e5      	ldr	r5, [r4, #12]
 8006128:	f8d9 2000 	ldr.w	r2, [r9]
 800612c:	f003 0306 	and.w	r3, r3, #6
 8006130:	2b04      	cmp	r3, #4
 8006132:	bf08      	it	eq
 8006134:	1aad      	subeq	r5, r5, r2
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	6922      	ldr	r2, [r4, #16]
 800613a:	bf0c      	ite	eq
 800613c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006140:	2500      	movne	r5, #0
 8006142:	4293      	cmp	r3, r2
 8006144:	bfc4      	itt	gt
 8006146:	1a9b      	subgt	r3, r3, r2
 8006148:	18ed      	addgt	r5, r5, r3
 800614a:	f04f 0900 	mov.w	r9, #0
 800614e:	341a      	adds	r4, #26
 8006150:	454d      	cmp	r5, r9
 8006152:	d11a      	bne.n	800618a <_printf_common+0xd6>
 8006154:	2000      	movs	r0, #0
 8006156:	e008      	b.n	800616a <_printf_common+0xb6>
 8006158:	2301      	movs	r3, #1
 800615a:	4652      	mov	r2, sl
 800615c:	4639      	mov	r1, r7
 800615e:	4630      	mov	r0, r6
 8006160:	47c0      	blx	r8
 8006162:	3001      	adds	r0, #1
 8006164:	d103      	bne.n	800616e <_printf_common+0xba>
 8006166:	f04f 30ff 	mov.w	r0, #4294967295
 800616a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616e:	3501      	adds	r5, #1
 8006170:	e7c3      	b.n	80060fa <_printf_common+0x46>
 8006172:	18e1      	adds	r1, r4, r3
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	2030      	movs	r0, #48	; 0x30
 8006178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800617c:	4422      	add	r2, r4
 800617e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006182:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006186:	3302      	adds	r3, #2
 8006188:	e7c5      	b.n	8006116 <_printf_common+0x62>
 800618a:	2301      	movs	r3, #1
 800618c:	4622      	mov	r2, r4
 800618e:	4639      	mov	r1, r7
 8006190:	4630      	mov	r0, r6
 8006192:	47c0      	blx	r8
 8006194:	3001      	adds	r0, #1
 8006196:	d0e6      	beq.n	8006166 <_printf_common+0xb2>
 8006198:	f109 0901 	add.w	r9, r9, #1
 800619c:	e7d8      	b.n	8006150 <_printf_common+0x9c>
	...

080061a0 <_printf_i>:
 80061a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80061a8:	460c      	mov	r4, r1
 80061aa:	7e09      	ldrb	r1, [r1, #24]
 80061ac:	b085      	sub	sp, #20
 80061ae:	296e      	cmp	r1, #110	; 0x6e
 80061b0:	4617      	mov	r7, r2
 80061b2:	4606      	mov	r6, r0
 80061b4:	4698      	mov	r8, r3
 80061b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061b8:	f000 80b3 	beq.w	8006322 <_printf_i+0x182>
 80061bc:	d822      	bhi.n	8006204 <_printf_i+0x64>
 80061be:	2963      	cmp	r1, #99	; 0x63
 80061c0:	d036      	beq.n	8006230 <_printf_i+0x90>
 80061c2:	d80a      	bhi.n	80061da <_printf_i+0x3a>
 80061c4:	2900      	cmp	r1, #0
 80061c6:	f000 80b9 	beq.w	800633c <_printf_i+0x19c>
 80061ca:	2958      	cmp	r1, #88	; 0x58
 80061cc:	f000 8083 	beq.w	80062d6 <_printf_i+0x136>
 80061d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80061d8:	e032      	b.n	8006240 <_printf_i+0xa0>
 80061da:	2964      	cmp	r1, #100	; 0x64
 80061dc:	d001      	beq.n	80061e2 <_printf_i+0x42>
 80061de:	2969      	cmp	r1, #105	; 0x69
 80061e0:	d1f6      	bne.n	80061d0 <_printf_i+0x30>
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	6813      	ldr	r3, [r2, #0]
 80061e6:	0605      	lsls	r5, r0, #24
 80061e8:	f103 0104 	add.w	r1, r3, #4
 80061ec:	d52a      	bpl.n	8006244 <_printf_i+0xa4>
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6011      	str	r1, [r2, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	da03      	bge.n	80061fe <_printf_i+0x5e>
 80061f6:	222d      	movs	r2, #45	; 0x2d
 80061f8:	425b      	negs	r3, r3
 80061fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061fe:	486f      	ldr	r0, [pc, #444]	; (80063bc <_printf_i+0x21c>)
 8006200:	220a      	movs	r2, #10
 8006202:	e039      	b.n	8006278 <_printf_i+0xd8>
 8006204:	2973      	cmp	r1, #115	; 0x73
 8006206:	f000 809d 	beq.w	8006344 <_printf_i+0x1a4>
 800620a:	d808      	bhi.n	800621e <_printf_i+0x7e>
 800620c:	296f      	cmp	r1, #111	; 0x6f
 800620e:	d020      	beq.n	8006252 <_printf_i+0xb2>
 8006210:	2970      	cmp	r1, #112	; 0x70
 8006212:	d1dd      	bne.n	80061d0 <_printf_i+0x30>
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	f043 0320 	orr.w	r3, r3, #32
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	e003      	b.n	8006226 <_printf_i+0x86>
 800621e:	2975      	cmp	r1, #117	; 0x75
 8006220:	d017      	beq.n	8006252 <_printf_i+0xb2>
 8006222:	2978      	cmp	r1, #120	; 0x78
 8006224:	d1d4      	bne.n	80061d0 <_printf_i+0x30>
 8006226:	2378      	movs	r3, #120	; 0x78
 8006228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800622c:	4864      	ldr	r0, [pc, #400]	; (80063c0 <_printf_i+0x220>)
 800622e:	e055      	b.n	80062dc <_printf_i+0x13c>
 8006230:	6813      	ldr	r3, [r2, #0]
 8006232:	1d19      	adds	r1, r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6011      	str	r1, [r2, #0]
 8006238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800623c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006240:	2301      	movs	r3, #1
 8006242:	e08c      	b.n	800635e <_printf_i+0x1be>
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6011      	str	r1, [r2, #0]
 8006248:	f010 0f40 	tst.w	r0, #64	; 0x40
 800624c:	bf18      	it	ne
 800624e:	b21b      	sxthne	r3, r3
 8006250:	e7cf      	b.n	80061f2 <_printf_i+0x52>
 8006252:	6813      	ldr	r3, [r2, #0]
 8006254:	6825      	ldr	r5, [r4, #0]
 8006256:	1d18      	adds	r0, r3, #4
 8006258:	6010      	str	r0, [r2, #0]
 800625a:	0628      	lsls	r0, r5, #24
 800625c:	d501      	bpl.n	8006262 <_printf_i+0xc2>
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	e002      	b.n	8006268 <_printf_i+0xc8>
 8006262:	0668      	lsls	r0, r5, #25
 8006264:	d5fb      	bpl.n	800625e <_printf_i+0xbe>
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	4854      	ldr	r0, [pc, #336]	; (80063bc <_printf_i+0x21c>)
 800626a:	296f      	cmp	r1, #111	; 0x6f
 800626c:	bf14      	ite	ne
 800626e:	220a      	movne	r2, #10
 8006270:	2208      	moveq	r2, #8
 8006272:	2100      	movs	r1, #0
 8006274:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006278:	6865      	ldr	r5, [r4, #4]
 800627a:	60a5      	str	r5, [r4, #8]
 800627c:	2d00      	cmp	r5, #0
 800627e:	f2c0 8095 	blt.w	80063ac <_printf_i+0x20c>
 8006282:	6821      	ldr	r1, [r4, #0]
 8006284:	f021 0104 	bic.w	r1, r1, #4
 8006288:	6021      	str	r1, [r4, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d13d      	bne.n	800630a <_printf_i+0x16a>
 800628e:	2d00      	cmp	r5, #0
 8006290:	f040 808e 	bne.w	80063b0 <_printf_i+0x210>
 8006294:	4665      	mov	r5, ip
 8006296:	2a08      	cmp	r2, #8
 8006298:	d10b      	bne.n	80062b2 <_printf_i+0x112>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	07db      	lsls	r3, r3, #31
 800629e:	d508      	bpl.n	80062b2 <_printf_i+0x112>
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	6862      	ldr	r2, [r4, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	bfde      	ittt	le
 80062a8:	2330      	movle	r3, #48	; 0x30
 80062aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062b2:	ebac 0305 	sub.w	r3, ip, r5
 80062b6:	6123      	str	r3, [r4, #16]
 80062b8:	f8cd 8000 	str.w	r8, [sp]
 80062bc:	463b      	mov	r3, r7
 80062be:	aa03      	add	r2, sp, #12
 80062c0:	4621      	mov	r1, r4
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7ff fef6 	bl	80060b4 <_printf_common>
 80062c8:	3001      	adds	r0, #1
 80062ca:	d14d      	bne.n	8006368 <_printf_i+0x1c8>
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	b005      	add	sp, #20
 80062d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062d6:	4839      	ldr	r0, [pc, #228]	; (80063bc <_printf_i+0x21c>)
 80062d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80062dc:	6813      	ldr	r3, [r2, #0]
 80062de:	6821      	ldr	r1, [r4, #0]
 80062e0:	1d1d      	adds	r5, r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6015      	str	r5, [r2, #0]
 80062e6:	060a      	lsls	r2, r1, #24
 80062e8:	d50b      	bpl.n	8006302 <_printf_i+0x162>
 80062ea:	07ca      	lsls	r2, r1, #31
 80062ec:	bf44      	itt	mi
 80062ee:	f041 0120 	orrmi.w	r1, r1, #32
 80062f2:	6021      	strmi	r1, [r4, #0]
 80062f4:	b91b      	cbnz	r3, 80062fe <_printf_i+0x15e>
 80062f6:	6822      	ldr	r2, [r4, #0]
 80062f8:	f022 0220 	bic.w	r2, r2, #32
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	2210      	movs	r2, #16
 8006300:	e7b7      	b.n	8006272 <_printf_i+0xd2>
 8006302:	064d      	lsls	r5, r1, #25
 8006304:	bf48      	it	mi
 8006306:	b29b      	uxthmi	r3, r3
 8006308:	e7ef      	b.n	80062ea <_printf_i+0x14a>
 800630a:	4665      	mov	r5, ip
 800630c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006310:	fb02 3311 	mls	r3, r2, r1, r3
 8006314:	5cc3      	ldrb	r3, [r0, r3]
 8006316:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800631a:	460b      	mov	r3, r1
 800631c:	2900      	cmp	r1, #0
 800631e:	d1f5      	bne.n	800630c <_printf_i+0x16c>
 8006320:	e7b9      	b.n	8006296 <_printf_i+0xf6>
 8006322:	6813      	ldr	r3, [r2, #0]
 8006324:	6825      	ldr	r5, [r4, #0]
 8006326:	6961      	ldr	r1, [r4, #20]
 8006328:	1d18      	adds	r0, r3, #4
 800632a:	6010      	str	r0, [r2, #0]
 800632c:	0628      	lsls	r0, r5, #24
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	d501      	bpl.n	8006336 <_printf_i+0x196>
 8006332:	6019      	str	r1, [r3, #0]
 8006334:	e002      	b.n	800633c <_printf_i+0x19c>
 8006336:	066a      	lsls	r2, r5, #25
 8006338:	d5fb      	bpl.n	8006332 <_printf_i+0x192>
 800633a:	8019      	strh	r1, [r3, #0]
 800633c:	2300      	movs	r3, #0
 800633e:	6123      	str	r3, [r4, #16]
 8006340:	4665      	mov	r5, ip
 8006342:	e7b9      	b.n	80062b8 <_printf_i+0x118>
 8006344:	6813      	ldr	r3, [r2, #0]
 8006346:	1d19      	adds	r1, r3, #4
 8006348:	6011      	str	r1, [r2, #0]
 800634a:	681d      	ldr	r5, [r3, #0]
 800634c:	6862      	ldr	r2, [r4, #4]
 800634e:	2100      	movs	r1, #0
 8006350:	4628      	mov	r0, r5
 8006352:	f7f9 ff5d 	bl	8000210 <memchr>
 8006356:	b108      	cbz	r0, 800635c <_printf_i+0x1bc>
 8006358:	1b40      	subs	r0, r0, r5
 800635a:	6060      	str	r0, [r4, #4]
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	2300      	movs	r3, #0
 8006362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006366:	e7a7      	b.n	80062b8 <_printf_i+0x118>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	462a      	mov	r2, r5
 800636c:	4639      	mov	r1, r7
 800636e:	4630      	mov	r0, r6
 8006370:	47c0      	blx	r8
 8006372:	3001      	adds	r0, #1
 8006374:	d0aa      	beq.n	80062cc <_printf_i+0x12c>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	079b      	lsls	r3, r3, #30
 800637a:	d413      	bmi.n	80063a4 <_printf_i+0x204>
 800637c:	68e0      	ldr	r0, [r4, #12]
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	4298      	cmp	r0, r3
 8006382:	bfb8      	it	lt
 8006384:	4618      	movlt	r0, r3
 8006386:	e7a3      	b.n	80062d0 <_printf_i+0x130>
 8006388:	2301      	movs	r3, #1
 800638a:	464a      	mov	r2, r9
 800638c:	4639      	mov	r1, r7
 800638e:	4630      	mov	r0, r6
 8006390:	47c0      	blx	r8
 8006392:	3001      	adds	r0, #1
 8006394:	d09a      	beq.n	80062cc <_printf_i+0x12c>
 8006396:	3501      	adds	r5, #1
 8006398:	68e3      	ldr	r3, [r4, #12]
 800639a:	9a03      	ldr	r2, [sp, #12]
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	42ab      	cmp	r3, r5
 80063a0:	dcf2      	bgt.n	8006388 <_printf_i+0x1e8>
 80063a2:	e7eb      	b.n	800637c <_printf_i+0x1dc>
 80063a4:	2500      	movs	r5, #0
 80063a6:	f104 0919 	add.w	r9, r4, #25
 80063aa:	e7f5      	b.n	8006398 <_printf_i+0x1f8>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ac      	bne.n	800630a <_printf_i+0x16a>
 80063b0:	7803      	ldrb	r3, [r0, #0]
 80063b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ba:	e76c      	b.n	8006296 <_printf_i+0xf6>
 80063bc:	08006659 	.word	0x08006659
 80063c0:	0800666a 	.word	0x0800666a

080063c4 <memmove>:
 80063c4:	4288      	cmp	r0, r1
 80063c6:	b510      	push	{r4, lr}
 80063c8:	eb01 0302 	add.w	r3, r1, r2
 80063cc:	d807      	bhi.n	80063de <memmove+0x1a>
 80063ce:	1e42      	subs	r2, r0, #1
 80063d0:	4299      	cmp	r1, r3
 80063d2:	d00a      	beq.n	80063ea <memmove+0x26>
 80063d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80063dc:	e7f8      	b.n	80063d0 <memmove+0xc>
 80063de:	4283      	cmp	r3, r0
 80063e0:	d9f5      	bls.n	80063ce <memmove+0xa>
 80063e2:	1881      	adds	r1, r0, r2
 80063e4:	1ad2      	subs	r2, r2, r3
 80063e6:	42d3      	cmn	r3, r2
 80063e8:	d100      	bne.n	80063ec <memmove+0x28>
 80063ea:	bd10      	pop	{r4, pc}
 80063ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80063f4:	e7f7      	b.n	80063e6 <memmove+0x22>
	...

080063f8 <_free_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4605      	mov	r5, r0
 80063fc:	2900      	cmp	r1, #0
 80063fe:	d045      	beq.n	800648c <_free_r+0x94>
 8006400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006404:	1f0c      	subs	r4, r1, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	18e4      	addlt	r4, r4, r3
 800640c:	f000 f8d2 	bl	80065b4 <__malloc_lock>
 8006410:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <_free_r+0x98>)
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	4610      	mov	r0, r2
 8006416:	b933      	cbnz	r3, 8006426 <_free_r+0x2e>
 8006418:	6063      	str	r3, [r4, #4]
 800641a:	6014      	str	r4, [r2, #0]
 800641c:	4628      	mov	r0, r5
 800641e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006422:	f000 b8c8 	b.w	80065b6 <__malloc_unlock>
 8006426:	42a3      	cmp	r3, r4
 8006428:	d90c      	bls.n	8006444 <_free_r+0x4c>
 800642a:	6821      	ldr	r1, [r4, #0]
 800642c:	1862      	adds	r2, r4, r1
 800642e:	4293      	cmp	r3, r2
 8006430:	bf04      	itt	eq
 8006432:	681a      	ldreq	r2, [r3, #0]
 8006434:	685b      	ldreq	r3, [r3, #4]
 8006436:	6063      	str	r3, [r4, #4]
 8006438:	bf04      	itt	eq
 800643a:	1852      	addeq	r2, r2, r1
 800643c:	6022      	streq	r2, [r4, #0]
 800643e:	6004      	str	r4, [r0, #0]
 8006440:	e7ec      	b.n	800641c <_free_r+0x24>
 8006442:	4613      	mov	r3, r2
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	b10a      	cbz	r2, 800644c <_free_r+0x54>
 8006448:	42a2      	cmp	r2, r4
 800644a:	d9fa      	bls.n	8006442 <_free_r+0x4a>
 800644c:	6819      	ldr	r1, [r3, #0]
 800644e:	1858      	adds	r0, r3, r1
 8006450:	42a0      	cmp	r0, r4
 8006452:	d10b      	bne.n	800646c <_free_r+0x74>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	4401      	add	r1, r0
 8006458:	1858      	adds	r0, r3, r1
 800645a:	4282      	cmp	r2, r0
 800645c:	6019      	str	r1, [r3, #0]
 800645e:	d1dd      	bne.n	800641c <_free_r+0x24>
 8006460:	6810      	ldr	r0, [r2, #0]
 8006462:	6852      	ldr	r2, [r2, #4]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	4401      	add	r1, r0
 8006468:	6019      	str	r1, [r3, #0]
 800646a:	e7d7      	b.n	800641c <_free_r+0x24>
 800646c:	d902      	bls.n	8006474 <_free_r+0x7c>
 800646e:	230c      	movs	r3, #12
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	e7d3      	b.n	800641c <_free_r+0x24>
 8006474:	6820      	ldr	r0, [r4, #0]
 8006476:	1821      	adds	r1, r4, r0
 8006478:	428a      	cmp	r2, r1
 800647a:	bf04      	itt	eq
 800647c:	6811      	ldreq	r1, [r2, #0]
 800647e:	6852      	ldreq	r2, [r2, #4]
 8006480:	6062      	str	r2, [r4, #4]
 8006482:	bf04      	itt	eq
 8006484:	1809      	addeq	r1, r1, r0
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	605c      	str	r4, [r3, #4]
 800648a:	e7c7      	b.n	800641c <_free_r+0x24>
 800648c:	bd38      	pop	{r3, r4, r5, pc}
 800648e:	bf00      	nop
 8006490:	20012e4c 	.word	0x20012e4c

08006494 <_malloc_r>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	1ccd      	adds	r5, r1, #3
 8006498:	f025 0503 	bic.w	r5, r5, #3
 800649c:	3508      	adds	r5, #8
 800649e:	2d0c      	cmp	r5, #12
 80064a0:	bf38      	it	cc
 80064a2:	250c      	movcc	r5, #12
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	4606      	mov	r6, r0
 80064a8:	db01      	blt.n	80064ae <_malloc_r+0x1a>
 80064aa:	42a9      	cmp	r1, r5
 80064ac:	d903      	bls.n	80064b6 <_malloc_r+0x22>
 80064ae:	230c      	movs	r3, #12
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	2000      	movs	r0, #0
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	f000 f87d 	bl	80065b4 <__malloc_lock>
 80064ba:	4a21      	ldr	r2, [pc, #132]	; (8006540 <_malloc_r+0xac>)
 80064bc:	6814      	ldr	r4, [r2, #0]
 80064be:	4621      	mov	r1, r4
 80064c0:	b991      	cbnz	r1, 80064e8 <_malloc_r+0x54>
 80064c2:	4c20      	ldr	r4, [pc, #128]	; (8006544 <_malloc_r+0xb0>)
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	b91b      	cbnz	r3, 80064d0 <_malloc_r+0x3c>
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f863 	bl	8006594 <_sbrk_r>
 80064ce:	6020      	str	r0, [r4, #0]
 80064d0:	4629      	mov	r1, r5
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f85e 	bl	8006594 <_sbrk_r>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d124      	bne.n	8006526 <_malloc_r+0x92>
 80064dc:	230c      	movs	r3, #12
 80064de:	6033      	str	r3, [r6, #0]
 80064e0:	4630      	mov	r0, r6
 80064e2:	f000 f868 	bl	80065b6 <__malloc_unlock>
 80064e6:	e7e4      	b.n	80064b2 <_malloc_r+0x1e>
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	1b5b      	subs	r3, r3, r5
 80064ec:	d418      	bmi.n	8006520 <_malloc_r+0x8c>
 80064ee:	2b0b      	cmp	r3, #11
 80064f0:	d90f      	bls.n	8006512 <_malloc_r+0x7e>
 80064f2:	600b      	str	r3, [r1, #0]
 80064f4:	50cd      	str	r5, [r1, r3]
 80064f6:	18cc      	adds	r4, r1, r3
 80064f8:	4630      	mov	r0, r6
 80064fa:	f000 f85c 	bl	80065b6 <__malloc_unlock>
 80064fe:	f104 000b 	add.w	r0, r4, #11
 8006502:	1d23      	adds	r3, r4, #4
 8006504:	f020 0007 	bic.w	r0, r0, #7
 8006508:	1ac3      	subs	r3, r0, r3
 800650a:	d0d3      	beq.n	80064b4 <_malloc_r+0x20>
 800650c:	425a      	negs	r2, r3
 800650e:	50e2      	str	r2, [r4, r3]
 8006510:	e7d0      	b.n	80064b4 <_malloc_r+0x20>
 8006512:	428c      	cmp	r4, r1
 8006514:	684b      	ldr	r3, [r1, #4]
 8006516:	bf16      	itet	ne
 8006518:	6063      	strne	r3, [r4, #4]
 800651a:	6013      	streq	r3, [r2, #0]
 800651c:	460c      	movne	r4, r1
 800651e:	e7eb      	b.n	80064f8 <_malloc_r+0x64>
 8006520:	460c      	mov	r4, r1
 8006522:	6849      	ldr	r1, [r1, #4]
 8006524:	e7cc      	b.n	80064c0 <_malloc_r+0x2c>
 8006526:	1cc4      	adds	r4, r0, #3
 8006528:	f024 0403 	bic.w	r4, r4, #3
 800652c:	42a0      	cmp	r0, r4
 800652e:	d005      	beq.n	800653c <_malloc_r+0xa8>
 8006530:	1a21      	subs	r1, r4, r0
 8006532:	4630      	mov	r0, r6
 8006534:	f000 f82e 	bl	8006594 <_sbrk_r>
 8006538:	3001      	adds	r0, #1
 800653a:	d0cf      	beq.n	80064dc <_malloc_r+0x48>
 800653c:	6025      	str	r5, [r4, #0]
 800653e:	e7db      	b.n	80064f8 <_malloc_r+0x64>
 8006540:	20012e4c 	.word	0x20012e4c
 8006544:	20012e50 	.word	0x20012e50

08006548 <_realloc_r>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	4607      	mov	r7, r0
 800654c:	4614      	mov	r4, r2
 800654e:	460e      	mov	r6, r1
 8006550:	b921      	cbnz	r1, 800655c <_realloc_r+0x14>
 8006552:	4611      	mov	r1, r2
 8006554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006558:	f7ff bf9c 	b.w	8006494 <_malloc_r>
 800655c:	b922      	cbnz	r2, 8006568 <_realloc_r+0x20>
 800655e:	f7ff ff4b 	bl	80063f8 <_free_r>
 8006562:	4625      	mov	r5, r4
 8006564:	4628      	mov	r0, r5
 8006566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006568:	f000 f826 	bl	80065b8 <_malloc_usable_size_r>
 800656c:	42a0      	cmp	r0, r4
 800656e:	d20f      	bcs.n	8006590 <_realloc_r+0x48>
 8006570:	4621      	mov	r1, r4
 8006572:	4638      	mov	r0, r7
 8006574:	f7ff ff8e 	bl	8006494 <_malloc_r>
 8006578:	4605      	mov	r5, r0
 800657a:	2800      	cmp	r0, #0
 800657c:	d0f2      	beq.n	8006564 <_realloc_r+0x1c>
 800657e:	4631      	mov	r1, r6
 8006580:	4622      	mov	r2, r4
 8006582:	f7ff fbfd 	bl	8005d80 <memcpy>
 8006586:	4631      	mov	r1, r6
 8006588:	4638      	mov	r0, r7
 800658a:	f7ff ff35 	bl	80063f8 <_free_r>
 800658e:	e7e9      	b.n	8006564 <_realloc_r+0x1c>
 8006590:	4635      	mov	r5, r6
 8006592:	e7e7      	b.n	8006564 <_realloc_r+0x1c>

08006594 <_sbrk_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4c06      	ldr	r4, [pc, #24]	; (80065b0 <_sbrk_r+0x1c>)
 8006598:	2300      	movs	r3, #0
 800659a:	4605      	mov	r5, r0
 800659c:	4608      	mov	r0, r1
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	f7fb fa18 	bl	80019d4 <_sbrk>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d102      	bne.n	80065ae <_sbrk_r+0x1a>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	b103      	cbz	r3, 80065ae <_sbrk_r+0x1a>
 80065ac:	602b      	str	r3, [r5, #0]
 80065ae:	bd38      	pop	{r3, r4, r5, pc}
 80065b0:	20012f98 	.word	0x20012f98

080065b4 <__malloc_lock>:
 80065b4:	4770      	bx	lr

080065b6 <__malloc_unlock>:
 80065b6:	4770      	bx	lr

080065b8 <_malloc_usable_size_r>:
 80065b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065bc:	1f18      	subs	r0, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfbc      	itt	lt
 80065c2:	580b      	ldrlt	r3, [r1, r0]
 80065c4:	18c0      	addlt	r0, r0, r3
 80065c6:	4770      	bx	lr

080065c8 <_init>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	bf00      	nop
 80065cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ce:	bc08      	pop	{r3}
 80065d0:	469e      	mov	lr, r3
 80065d2:	4770      	bx	lr

080065d4 <_fini>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr
